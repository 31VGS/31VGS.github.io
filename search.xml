<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Windows 平台上的 TCP 并发服务</title>
      <link href="/2022/06/26/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B3/"/>
      <url>/2022/06/26/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B3/</url>
      
        <content type="html"><![CDATA[<h1 id="Windows-平台上的-TCP-并发服务"><a href="#Windows-平台上的-TCP-并发服务" class="headerlink" title="Windows 平台上的 TCP 并发服务"></a>Windows 平台上的 TCP 并发服务</h1><h2 id="实验目标"><a href="#实验目标" class="headerlink" title="实验目标"></a>实验目标</h2><p>编程内容与实验 1 相同，操作系统为 windows。了解 Windows 与 Linux 平台编程环境 的差异，掌握 Winsock 编程接口及编程方法。</p><h2 id="实验内容"><a href="#实验内容" class="headerlink" title="实验内容"></a>实验内容</h2><p>编程内容与实验 1 相同，操作系统为 windows。了解 Windows 与 Linux 平台编程环境 的差异，掌握 Winsock 编程接口及编程方法。</p><h2 id="设计分析"><a href="#设计分析" class="headerlink" title="设计分析"></a>设计分析</h2><ol><li><pre><code>使用无名管道</code></pre>编程内容与实验 1 相同，操作系统为 windows。了解 Windows 与 Linux 平台编程环境 的差异，掌握 Winsock 编程接口及编程方法。<h2 id="实验代码"><a href="#实验代码" class="headerlink" title="实验代码"></a>实验代码</h2>Client.cpp<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;winsock2.h&gt;</span><br><span class="line">#pragma comment(lib, &quot;ws2_32.lib&quot;)</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    WSADATA wsaData;</span><br><span class="line">    WSAStartup(MAKEWORD(2, 2), &amp;wsaData);</span><br><span class="line"></span><br><span class="line">    fputs(&quot;ip: &quot;, stdout);</span><br><span class="line">    char host[64];</span><br><span class="line">    scanf(&quot;%s&quot;, host);</span><br><span class="line"></span><br><span class="line">    fputs(&quot;port: &quot;, stdout);</span><br><span class="line">    int port;</span><br><span class="line">    scanf(&quot;%d&quot;, &amp;port);</span><br><span class="line"></span><br><span class="line">    //建立连接</span><br><span class="line">    SOCKET sock = socket(PF_INET, SOCK_STREAM, IPPROTO_TCP);</span><br><span class="line"></span><br><span class="line">    struct sockaddr_in sockAddr;</span><br><span class="line">    memset(&amp;sockAddr, 0, sizeof(sockAddr));</span><br><span class="line">    sockAddr.sin_family = PF_INET;</span><br><span class="line">    sockAddr.sin_addr.s_addr = inet_addr(host);</span><br><span class="line">    sockAddr.sin_port = htons(port);</span><br><span class="line">    connect(sock, (SOCKADDR *)&amp;sockAddr, sizeof(SOCKADDR));</span><br><span class="line"></span><br><span class="line">    char msg[MAXBYTE];</span><br><span class="line">    fputs(&quot;input serve second: &quot;, stdout);</span><br><span class="line">    int time;</span><br><span class="line">    scanf(&quot;%d&quot;, &amp;time);</span><br><span class="line">    snprintf(msg, MAXBYTE, &quot;%d\n&quot;, time);</span><br><span class="line">    send(sock, msg, strlen(msg) + 1, 0);</span><br><span class="line"></span><br><span class="line">    closesocket(sock);</span><br><span class="line"></span><br><span class="line">    WSACleanup();</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>Server.c<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;winsock2.h&gt;</span><br><span class="line">#include &lt;unistd.h&gt;</span><br><span class="line">#include &lt;time.h&gt;</span><br><span class="line">#pragma comment(lib, &quot;ws2_32.lib&quot;)</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    WSADATA wsaData;</span><br><span class="line">    WSAStartup(MAKEWORD(2, 2), &amp;wsaData);</span><br><span class="line"></span><br><span class="line">    fputs(&quot;port: &quot;, stdout);</span><br><span class="line">    int port;</span><br><span class="line">    scanf(&quot;%d&quot;, &amp;port);</span><br><span class="line"></span><br><span class="line">    //建立接口初始化设置</span><br><span class="line">    SOCKET servSock = socket(PF_INET, SOCK_STREAM, IPPROTO_TCP);</span><br><span class="line"></span><br><span class="line">    struct sockaddr_in sockAddr;</span><br><span class="line">    memset(&amp;sockAddr, 0, sizeof(sockAddr));</span><br><span class="line">    sockAddr.sin_family = PF_INET;</span><br><span class="line">    sockAddr.sin_addr.s_addr = inet_addr(&quot;127.0.0.1&quot;);</span><br><span class="line">    sockAddr.sin_port = htons(port);</span><br><span class="line">    bind(servSock, (SOCKADDR *)&amp;sockAddr, sizeof(SOCKADDR));</span><br><span class="line"></span><br><span class="line">    listen(servSock, 20);</span><br><span class="line"></span><br><span class="line">    //清除僵尸进程</span><br><span class="line">    SOCKADDR clntAddr;</span><br><span class="line">    int nSize = sizeof(SOCKADDR);</span><br><span class="line"></span><br><span class="line">    for (;;)</span><br><span class="line">    &#123;</span><br><span class="line">        SOCKET clntSock = accept(servSock, (SOCKADDR *)&amp;clntAddr, &amp;nSize);</span><br><span class="line">        char recvBuf[MAXBYTE] = &#123;0&#125;;</span><br><span class="line">        recv(clntSock, recvBuf, MAXBYTE, 0);</span><br><span class="line">        int sec;</span><br><span class="line">        time_t tmval;</span><br><span class="line">        struct tm *tmptr;</span><br><span class="line">        sscanf(recvBuf, &quot;%d&quot;, &amp;sec);</span><br><span class="line">        if (sec &gt; 0)</span><br><span class="line">        &#123;</span><br><span class="line">            tmval = time(0);</span><br><span class="line">            tmptr = localtime(&amp;tmval);</span><br><span class="line">            printf(&quot;[%02d:%02d:%02d] server will sleep %d seconds\n&quot;,</span><br><span class="line">                   tmptr-&gt;tm_hour, tmptr-&gt;tm_min,</span><br><span class="line">                   tmptr-&gt;tm_sec, sec);</span><br><span class="line">            sleep(sec);</span><br><span class="line">            tmval = time(0);</span><br><span class="line">            tmptr = localtime(&amp;tmval);</span><br><span class="line">            printf(&quot;[%02d:%02d:%02d] server is wake up\n&quot;,</span><br><span class="line">                   tmptr-&gt;tm_hour, tmptr-&gt;tm_min, tmptr-&gt;tm_sec);</span><br><span class="line">        &#125;</span><br><span class="line">        closesocket(clntSock);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    closesocket(servSock);</span><br><span class="line"></span><br><span class="line">    WSACleanup();</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h2><img src="../../public/img/block/QQ%E6%88%AA%E5%9B%BE20220629163908.png"></li></ol>]]></content>
      
      
      <categories>
          
          <category> 实验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>进程间的协调通信</title>
      <link href="/2022/06/25/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B2/"/>
      <url>/2022/06/25/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B2/</url>
      
        <content type="html"><![CDATA[<h1 id="进程间的协调通信"><a href="#进程间的协调通信" class="headerlink" title="进程间的协调通信"></a>进程间的协调通信</h1><h2 id="实验目标"><a href="#实验目标" class="headerlink" title="实验目标"></a>实验目标</h2><p>掌握进程的概念、进程间通信的基本原理、集成间通信的主要类型和各自的特点。。</p><h2 id="实验内容"><a href="#实验内容" class="headerlink" title="实验内容"></a>实验内容</h2><p>在linux平台上实现1个父进程、2个子进程，利用管道和共享内存实现两个子进程之间数据快速传送。</p><ol><li>   创建一个进程，再创建一对管道、一块共享内存（大于64kB）；</li><li>   通过fork（）函数生成2个子进程；</li><li>   调试程序，确定父、子进程之间可以双向通信；</li><li>   调试程序，确定两个子进程之间可以通过父进程中转实现双向通信；</li><li>   调试程序，确定两个子进程都可访问共享内存；</li><li>   实现两个子进程之间无冲突地访问共享内存。传送的数据块不小于32kB，为了能够看到演示效果，读/写每个字节后都延时0.5ms。<h2 id="设计分析"><a href="#设计分析" class="headerlink" title="设计分析"></a>设计分析</h2></li><li><pre><code>使用无名管道</code></pre>父进程,用管道1读数据,管道2写数据<br>子进程1用管道1写数据，子进程2用管道2读数据</li><li>   进程直接读写内存，不需要任何数据的拷贝，为了在多个进程间交换信息，内核专门留出了一块内存区，由需要访问的进程将其映射到自己私有地址空间，进程直接读写这一内存区而不需要进行数据的拷贝，提高了效率<h2 id="实验代码"><a href="#实验代码" class="headerlink" title="实验代码"></a>实验代码</h2>pipe.c<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;unistd.h&gt;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;errno.h&gt;</span><br><span class="line">#include &lt;wait.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">#include &lt;sys/types.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int main(int argc, char **argv)</span><br><span class="line">&#123;</span><br><span class="line">    int pipe1[2], pipe2[2];</span><br><span class="line">    int n;</span><br><span class="line">    char cstr[] = &quot;child1 data&quot;;</span><br><span class="line">    char buf[128];</span><br><span class="line"></span><br><span class="line">    // 1个父进程 2个子进程</span><br><span class="line">    if (pipe(pipe1) &lt; 0 || pipe(pipe2) &lt; 0)</span><br><span class="line">        cout &lt;&lt; &quot;pipe error&quot; &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    pid_t pid1 = fork();</span><br><span class="line">    pid_t pid2 = fork();</span><br><span class="line"></span><br><span class="line">    if (pid1 == -1)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;fork pid1 failed!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    else if (pid1 &gt; 0)</span><br><span class="line">    &#123;</span><br><span class="line">        //父进程,用管道1读数据,管道2写数据</span><br><span class="line">        cout &lt;&lt; &quot;father PID:&quot; &lt;&lt; getpid() &lt;&lt; endl;</span><br><span class="line">        if (read(pipe1[0], buf, 100) &gt; 0)</span><br><span class="line">            cout &lt;&lt; &quot;father received:&quot; &lt;&lt; buf &lt;&lt; endl;</span><br><span class="line">        write(pipe2[1], buf, strlen(buf));</span><br><span class="line">    &#125;</span><br><span class="line">    else if (pid1 == 0)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; &quot;\npid1:&quot; &lt;&lt; getpid() &lt;&lt; endl;</span><br><span class="line">        //子进程1用管道1写数据</span><br><span class="line">        close(pipe1[0]); //关闭pipe1读端口</span><br><span class="line">        close(pipe2[0]); //关闭pipe2读端口</span><br><span class="line">        close(pipe2[1]); //关闭pipe2写端口</span><br><span class="line">        write(pipe1[1], cstr, strlen(cstr));</span><br><span class="line">    &#125;</span><br><span class="line">    if (pid2 == -1)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;fork pid2 failed!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    else if (pid2 == 0)</span><br><span class="line">    &#123;</span><br><span class="line">        //子进程2用管道2读数据</span><br><span class="line">        close(pipe1[0]); //关闭pipe1读端口</span><br><span class="line">        close(pipe1[1]); //关闭pipe1写端口</span><br><span class="line">        close(pipe2[1]); //关闭pipe2写端口</span><br><span class="line">        if (read(pipe2[0], buf, 128) &gt; 0)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; &quot;\npid2:&quot; &lt;&lt; getpid() &lt;&lt; endl;</span><br><span class="line">            cout &lt;&lt; &quot;pid2 receive:&quot; &lt;&lt; buf &lt;&lt; endl;</span><br><span class="line">            exit(0);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>share.c<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;unistd.h&gt;</span><br><span class="line">#include &lt;sys/types.h&gt;</span><br><span class="line">#include &lt;sys/stat.h&gt;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;errno.h&gt;</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;wait.h&gt;</span><br><span class="line">#include &lt;fcntl.h&gt;</span><br><span class="line">#include &lt;sys/wait.h&gt;</span><br><span class="line">#include &lt;sys/time.h&gt;</span><br><span class="line">#include &lt;signal.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">#include &lt;sys/ipc.h&gt;</span><br><span class="line">#include &lt;sys/shm.h&gt;</span><br><span class="line">#define MEM_SIZE 1024</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line">int shmid;  //内存id</span><br><span class="line">int status; //延时时间</span><br><span class="line"></span><br><span class="line">main(int argc, char **argv)</span><br><span class="line">&#123;</span><br><span class="line">    char *p_addr, *c1_addr, *c2_addr;</span><br><span class="line">    key_t key;</span><br><span class="line">    char *name = (char *)&quot;/dev&quot;;</span><br><span class="line">    char *text = (char *)&quot;hello&quot;;</span><br><span class="line">    int pid1, pid2;</span><br><span class="line"></span><br><span class="line">    key = ftok(name, &#x27;a&#x27;);</span><br><span class="line">    if (key == -1)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(&quot;ftok error&quot;);</span><br><span class="line">        exit(1);</span><br><span class="line">    &#125;</span><br><span class="line">    shmid = shmget(key, MEM_SIZE, 0777 | IPC_CREAT);</span><br><span class="line">    if (shmid == -1)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(&quot;shmget error&quot;);</span><br><span class="line">        exit(1);</span><br><span class="line">    &#125;</span><br><span class="line">    if ((pid1 = fork()) == -1)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;childprocess1 failed!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    else if (pid1 &gt; 0)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; &quot;father PID:&quot; &lt;&lt; getpid() &lt;&lt; endl;</span><br><span class="line">        //为了能够看到演示效果，读/写每个字节后都延时0.5ms。</span><br><span class="line">        wait(&amp;status);</span><br><span class="line">        p_addr = (char *)shmat(shmid, 0, 0);</span><br><span class="line">        cout &lt;&lt; &quot;father received:&quot; &lt;&lt; p_addr &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        cout &lt;&lt; &quot;child1 PID:&quot; &lt;&lt; getpid() &lt;&lt; endl;</span><br><span class="line">        c1_addr = (char *)shmat(shmid, 0, 0);</span><br><span class="line">        memset(c1_addr, &#x27;\0&#x27;, 1024);</span><br><span class="line">        strncpy(c1_addr, text, 1024);</span><br><span class="line">        exit(0);</span><br><span class="line">    &#125;</span><br><span class="line">    if ((pid2 = fork()) == -1)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;childprocess2 failed!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    else if (pid2 == 0)</span><br><span class="line">    &#123;</span><br><span class="line">        c2_addr = (char *)shmat(shmid, 0, 0);</span><br><span class="line">        cout &lt;&lt; &quot;\nchild2 PID:&quot; &lt;&lt; getpid() &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; &quot;child2 received:&quot; &lt;&lt; c2_addr &lt;&lt; endl;</span><br><span class="line">        exit(0);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h2><img src="../../public/img/block/QQ%E6%88%AA%E5%9B%BE20220629163043.png"></li></ol>]]></content>
      
      
      <categories>
          
          <category> 实验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux 平台上的 TCP 并发服务</title>
      <link href="/2022/06/24/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B1/"/>
      <url>/2022/06/24/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B1/</url>
      
        <content type="html"><![CDATA[<h1 id="linux-平台上的-TCP-并发服务"><a href="#linux-平台上的-TCP-并发服务" class="headerlink" title="linux 平台上的 TCP 并发服务"></a>linux 平台上的 TCP 并发服务</h1><h2 id="实验目标"><a href="#实验目标" class="headerlink" title="实验目标"></a>实验目标</h2><p>掌握基本套接字函数使用方法、TCP协议工作原理、并发服务原理和编程方法</p><h2 id="实验内容"><a href="#实验内容" class="headerlink" title="实验内容"></a>实验内容</h2><p>在linux平台上实现1个TCP并发服务器，至少可以为10个客户端同时提供服务。</p><ol><li>   基于TCP套接字编写服务器端程序代码，然后编译和调试；</li><li>   服务器程序要达到：可以绑定从终端输入的IP地址和端口；可以显示每一个进程的进程号；可以显示当前并发执行的进程数量；可以根据客户机要求的服务时间确定进程的生存时间。</li><li>   基于TCP套接字编写客户端程序代码，然后编译和调试；</li><li>   客户端程序要达到：可以从终端输入服务器的IP地址和端口；可以从终端输入对服务器的服务时间要求。</li><li>   联调服务器和客户端，服务器每收到一个连接就新建一个子进程，在子进程中接收客户端的服务时间请求，根据所请求的时间进行延时，然后终止子进程。如：客户端请求服务10s，则服务器的子进程运行10s，然后结束。</li><li>   服务器要清除因并发服务而产生的僵尸进程。<h2 id="设计分析"><a href="#设计分析" class="headerlink" title="设计分析"></a>设计分析</h2></li><li>   使用TCP并发，且每次链接创建进程</li><li>   自定义函数sigchld_handler用于清除僵尸进程</li><li>   客户端接受IP 端口（使用学号用于区别）时间，在服务端用sleep来做延时处理。<h2 id="实验代码"><a href="#实验代码" class="headerlink" title="实验代码"></a>实验代码</h2>client.c<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line"> * @summary:</span><br><span class="line"> * @Author: Jianxiang Guo</span><br><span class="line"> * @Date: 2022-06-24 12:09:12</span><br><span class="line"> * @LastEditTime: 2022-06-25 16:32:15</span><br><span class="line"> * @FilePath: \network\task1\client.c</span><br><span class="line"> */</span><br><span class="line">#include &lt;errno.h&gt;</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">#include &lt;sys/socket.h&gt;</span><br><span class="line">#include &lt;netinet/in.h&gt;</span><br><span class="line">#include &lt;arpa/inet.h&gt;</span><br><span class="line">#include &lt;netdb.h&gt;</span><br><span class="line">#include &lt;unistd.h&gt;</span><br><span class="line">#include &lt;sys/types.h&gt;</span><br><span class="line"></span><br><span class="line">//建立链接</span><br><span class="line">int open_clientfd(char *hostname, int port)</span><br><span class="line">&#123;</span><br><span class="line">    int clientfd;</span><br><span class="line">    struct hostent *hp;</span><br><span class="line">    struct sockaddr_in serveraddr;</span><br><span class="line"></span><br><span class="line">    if ((clientfd = socket(AF_INET, SOCK_STREAM, 0)) &lt; 0)</span><br><span class="line">        return -1;</span><br><span class="line"></span><br><span class="line">    if ((hp = gethostbyname(hostname)) == NULL)</span><br><span class="line">        return -2;</span><br><span class="line">    memset(&amp;serveraddr, 0, sizeof(serveraddr));</span><br><span class="line">    serveraddr.sin_family = AF_INET;</span><br><span class="line">    memcpy((char *)&amp;serveraddr.sin_addr.s_addr,</span><br><span class="line">           (char *)hp-&gt;h_addr_list[0],</span><br><span class="line">           hp-&gt;h_length);</span><br><span class="line">    serveraddr.sin_port = htons(port);</span><br><span class="line"></span><br><span class="line">    //连接</span><br><span class="line">    if (connect(clientfd, (struct sockaddr *)&amp;serveraddr,</span><br><span class="line">                sizeof(serveraddr)) &lt; 0)</span><br><span class="line">        return -1;</span><br><span class="line">    return clientfd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 可以从终端输入服务器的IP地址和端口；可以从终端输入对服务器的服务时间要求。</span><br><span class="line">int main(int argc, char *argv[])</span><br><span class="line">&#123;</span><br><span class="line">    int clientfd, port;</span><br><span class="line">    char *host, *seconds;</span><br><span class="line"></span><br><span class="line">    if (argc != 4)</span><br><span class="line">    &#123;</span><br><span class="line">        fprintf(stderr, &quot;usage: %s &lt;host&gt; &lt;port&gt; &lt;seconds&gt;\n&quot;, argv[0]);</span><br><span class="line">        exit(-1);</span><br><span class="line">    &#125;</span><br><span class="line">    host = argv[1];</span><br><span class="line">    port = atoi(argv[2]);</span><br><span class="line">    seconds = argv[3];</span><br><span class="line"></span><br><span class="line">    //连接</span><br><span class="line">    if ((clientfd = open_clientfd(host, port)) == -1)</span><br><span class="line">    &#123;</span><br><span class="line">        fprintf(stderr, &quot;%s\n&quot;, strerror(errno));</span><br><span class="line">        exit(-1);</span><br><span class="line">    &#125;</span><br><span class="line">    write(clientfd, seconds, strlen(seconds));</span><br><span class="line">    close(clientfd);</span><br><span class="line">    exit(EXIT_SUCCESS);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>server.c<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line"> * @summary:</span><br><span class="line"> * @Author: Jianxiang Guo</span><br><span class="line"> * @Date: 2022-06-24 12:09:12</span><br><span class="line"> * @LastEditTime: 2022-06-25 16:24:33</span><br><span class="line"> * @FilePath: \network\task1\server.c</span><br><span class="line"> */</span><br><span class="line">#include &lt;errno.h&gt;</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">#include &lt;sys/socket.h&gt;</span><br><span class="line">#include &lt;netinet/in.h&gt;</span><br><span class="line">#include &lt;arpa/inet.h&gt;</span><br><span class="line">#include &lt;netdb.h&gt;</span><br><span class="line">#include &lt;sys/wait.h&gt;</span><br><span class="line">#include &lt;sys/types.h&gt;</span><br><span class="line">#include &lt;signal.h&gt;</span><br><span class="line">#include &lt;unistd.h&gt;</span><br><span class="line">#include &lt;time.h&gt;</span><br><span class="line"></span><br><span class="line">#define LISTENQ 1024 //监听队列</span><br><span class="line">#define BUFSIZE 1024 //缓冲区</span><br><span class="line"></span><br><span class="line">static int pcnt;</span><br><span class="line"></span><br><span class="line">//据客户机要求的服务时间确定进程的生存时间</span><br><span class="line">void service(int connfd)</span><br><span class="line">&#123;</span><br><span class="line">    char buf[BUFSIZE];</span><br><span class="line">    int seconds;</span><br><span class="line">    time_t tmval;</span><br><span class="line">    const struct tm *tmptr;</span><br><span class="line"></span><br><span class="line">    read(connfd, buf, BUFSIZE);</span><br><span class="line">    sscanf(buf, &quot;%d&quot;, &amp;seconds);</span><br><span class="line">    if (seconds &gt; 0)</span><br><span class="line">    &#123;</span><br><span class="line">        tmval = time(0);</span><br><span class="line">        tmptr = localtime(&amp;tmval);</span><br><span class="line">        printf(&quot;process %d: %d seconds. total child_pid: %d\n&quot;, getpid(), seconds, pcnt);</span><br><span class="line">        sleep(seconds);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//清除僵尸进程</span><br><span class="line">void sigchld_handler(int sig)</span><br><span class="line">&#123;</span><br><span class="line">    pid_t pid;</span><br><span class="line">    time_t tmval;</span><br><span class="line">    const struct tm *tmptr;</span><br><span class="line"></span><br><span class="line">    while ((pid = (waitpid(-1, NULL, WNOHANG))) &gt; 0)</span><br><span class="line">    &#123;</span><br><span class="line">        tmval = time(0);</span><br><span class="line">        tmptr = localtime(&amp;tmval);</span><br><span class="line">        printf(&quot;process %d exited. total child_pid: %d\n&quot;, pid, --pcnt);</span><br><span class="line">    &#125;</span><br><span class="line">    signal(SIGCHLD, sigchld_handler);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//监听</span><br><span class="line">int open_listenfd(int port)</span><br><span class="line">&#123;</span><br><span class="line">    int listenfd, optval = 1;</span><br><span class="line">    struct sockaddr_in serveraddr;</span><br><span class="line"></span><br><span class="line">    if ((listenfd = socket(AF_INET, SOCK_STREAM, 0)) &lt; 0)</span><br><span class="line">        return -1;</span><br><span class="line"></span><br><span class="line">    //设置socket</span><br><span class="line">    if (setsockopt(listenfd, SOL_SOCKET, SO_REUSEADDR,</span><br><span class="line">                   (const void *)&amp;optval, sizeof(int)) &lt; 0)</span><br><span class="line">        return -1;</span><br><span class="line"></span><br><span class="line">    memset(&amp;serveraddr, 0, sizeof(serveraddr));</span><br><span class="line">    serveraddr.sin_family = AF_INET;</span><br><span class="line">    serveraddr.sin_addr.s_addr = htonl(INADDR_ANY);</span><br><span class="line">    serveraddr.sin_port = htons((unsigned short)port);</span><br><span class="line"></span><br><span class="line">    //绑定</span><br><span class="line">    if (bind(listenfd, (struct sockaddr *)&amp;serveraddr,</span><br><span class="line">             sizeof(serveraddr)) &lt; 0)</span><br><span class="line">        return -1;</span><br><span class="line"></span><br><span class="line">    if (listen(listenfd, LISTENQ) &lt; 0)</span><br><span class="line">        return -1;</span><br><span class="line">    return listenfd;</span><br><span class="line">&#125;</span><br><span class="line">//输入 ip 端口 运行时间</span><br><span class="line">int main(int argc, char *argv[])</span><br><span class="line">&#123;</span><br><span class="line">    int listenfd, connfd, port;</span><br><span class="line">    unsigned int clientlen;</span><br><span class="line">    struct sockaddr_in clientaddr;</span><br><span class="line">    pid_t pid;</span><br><span class="line"></span><br><span class="line">    if (argc != 2)</span><br><span class="line">    &#123;</span><br><span class="line">        fprintf(stderr, &quot;%s &lt;port&gt;\n&quot;, argv[0]);</span><br><span class="line">        exit(-1);</span><br><span class="line">    &#125;</span><br><span class="line">    port = atoi(argv[1]);</span><br><span class="line"></span><br><span class="line">    //清除僵尸进程</span><br><span class="line">    signal(SIGCHLD, sigchld_handler);</span><br><span class="line">    if ((listenfd = open_listenfd(port)) == -1)</span><br><span class="line">    &#123;</span><br><span class="line">        fprintf(stderr, &quot;%s\n&quot;, strerror(errno));</span><br><span class="line">        exit(-1);</span><br><span class="line">    &#125;</span><br><span class="line">    for (;;)</span><br><span class="line">    &#123;</span><br><span class="line">        clientlen = sizeof(clientaddr);</span><br><span class="line">        do</span><br><span class="line">        &#123;</span><br><span class="line">            connfd = accept(listenfd, (struct sockaddr *)&amp;clientaddr.sin_addr.s_addr, &amp;clientlen);</span><br><span class="line">        &#125; while (connfd == -1 &amp;&amp; errno == EINTR);</span><br><span class="line"></span><br><span class="line">        if (connfd == -1)</span><br><span class="line">        &#123;</span><br><span class="line">            fprintf(stderr, &quot;%s\n&quot;, strerror(errno));</span><br><span class="line">            exit(-1);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if ((pid = fork()) == -1)</span><br><span class="line">        &#123;</span><br><span class="line">            fprintf(stderr, &quot;%s\n&quot;, strerror(errno));</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">            pcnt++;</span><br><span class="line">            if (pid == 0)</span><br><span class="line">            &#123;</span><br><span class="line">                close(listenfd);</span><br><span class="line">                service(connfd);</span><br><span class="line">                close(connfd);</span><br><span class="line">                exit(EXIT_SUCCESS);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        close(connfd);</span><br><span class="line">    &#125;</span><br><span class="line">    exit(EXIT_SUCCESS);</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h2><img src="../../public/img/block/QQ%E6%88%AA%E5%9B%BE20220629162558.png"></li></ol>]]></content>
      
      
      <categories>
          
          <category> 实验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编译原理 实现delete语句</title>
      <link href="/2022/06/15/%E5%AE%9E%E9%AA%8C%E4%B8%89/"/>
      <url>/2022/06/15/%E5%AE%9E%E9%AA%8C%E4%B8%89/</url>
      
        <content type="html"><![CDATA[<h1 id="编译原理实验三：实现delete语句"><a href="#编译原理实验三：实现delete语句" class="headerlink" title="编译原理实验三：实现delete语句"></a>编译原理实验三：实现delete语句</h1><p><strong>姓名</strong>：郭健祥<br><strong>学号</strong>：19030100392<br><strong>阿里云账号</strong>：vgs_31<br><strong>账号ID</strong>：1381522983556954</p><hr><h2 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h2><p>通过本次实验，熟悉数据库的逻辑结构，在语法制导翻译的基础上，完善DBMS系统，实现delete语句的解释执行</p><h2 id="实验内容"><a href="#实验内容" class="headerlink" title="实验内容"></a>实验内容</h2><p>XDSQL 1.0 simple项目 是对XDSQL 1.0数据库的源码进行修改得到的。它在完整源码的基础上，删除了delete sql对应的yacc代码与相应的查询处理层函数，故它不可直接运行，需要实验者增加部分源码。<br>实验提供的项目中，项目文件夹下包含一个名为 SQLFILE 的文件夹，它用来存储数据库的所有物理文件。其中已有三个表，分别名为 student , course , sc 。如果实验者误删除或修改了文件，可以使用提供的 XDSQL.exe 运行以下脚本即可重新生成 SQLFILE 文件夹.</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create database xjgl;</span><br><span class="line">use database xjgl;</span><br><span class="line">create table student(sname char(20),sno char(5),sdept char(10),sage int);</span><br><span class="line">insert into student(sname,sno,sdept) values(&#x27;zhangsan&#x27;,&#x27;01&#x27;,&#x27;cs&#x27;);</span><br><span class="line">insert into student(sname,sdept,sage) values(&#x27;xwd&#x27;,&#x27;math&#x27;,19);</span><br><span class="line">insert into student(sname,sno,sage) values(&#x27;ww&#x27;,&#x27;04&#x27;,19);</span><br><span class="line">insert into student values(&#x27;zhg&#x27;,&#x27;05&#x27;,&#x27;cs&#x27;,20);</span><br><span class="line">insert into student values(&#x27;lisi&#x27;,&#x27;02&#x27;,&#x27;ee&#x27;,18);</span><br><span class="line">create table course(cname char(20),cno char(5));</span><br><span class="line">insert into course values(&#x27;database&#x27;,&#x27;01&#x27;);</span><br><span class="line">insert into course values(&#x27;compilers&#x27;,&#x27;02&#x27;);</span><br><span class="line">insert into course values(&#x27;AI&#x27;,&#x27;03&#x27;);</span><br><span class="line">create table sc(sno char(5),cno char(5),grade int);</span><br><span class="line">insert into sc values(&#x27;01&#x27;,&#x27;01&#x27;,89);</span><br><span class="line">insert into sc values(&#x27;04&#x27;,&#x27;03&#x27;,98);</span><br><span class="line">insert into sc values(&#x27;05&#x27;,&#x27;01&#x27;,95);</span><br><span class="line">insert into sc (sno,cno) values(&#x27;01&#x27;,&#x27;02&#x27;);</span><br><span class="line">insert into sc (sno,cno) values(&#x27;02&#x27;,&#x27;03&#x27;);</span><br><span class="line">insert into sc (sno,cno) values(&#x27;05&#x27;,&#x27;02&#x27;);</span><br><span class="line">insert into sc (sno,cno) values(&#x27;05&#x27;,&#x27;03&#x27;);</span><br><span class="line">insert into sc(cno,grade) values(&#x27;02&#x27;,98);</span><br></pre></td></tr></table></figure><p>实验提供者已将所有类都打包为静态链接库文件，并在源码中给出了引用lib文件的预处理语句，实验者只需会正确的调用类和函数即可。<br>请参照实验指导.ppt和类与函数手册.pdf，按照其中的步骤将源码补充完整，使之能成功运行。</p><h2 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h2><ol><li>申请云主机，点击创建资源，获得ECS公网IP，登录名和密码。</li><li>打开开始菜单，搜索远程桌面连接并运行，依次填写连接信息。</li><li>点击连接，登录到ECS服务器。第一次连接可能会出现连接失败，等待一两分钟后再次连接即可登<br>录。</li><li>将Git-2.31.1-64-bit.exe复制到云主机（直接复制即可）。</li><li>安装git，安装步骤直接Next即可。</li><li>运行cmd，输入以下指令，将实验源代码下载到云主机。<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd C:\</span><br><span class="line">mkdir code</span><br><span class="line">cd code</span><br><span class="line">git config --global --unset http.proxy</span><br><span class="line">git clone https://github.com/flytigerman/XDSQL-1.0.git</span><br></pre></td></tr></table></figure>XDSQL-1.0文件夹内包括以下文件：XDQL 1.0 simple项目文件夹、XDSQL 1.0 complicated项目文件<br>夹、文档文件夹，文档文件夹内包含实验指导.ppt和类与函数手册.pdf。</li><li>将VS2019复制到云主机，安装。安装时只安装使用C++的桌面开发即可，时间大约20分钟。</li><li>打开VS2019，点击右上角的文件-&gt;打开-&gt;项目，打开XDSQL 1.0 simple项目（路径为C:\code\XDSQL-1.0\XDSQL 1.0 simple）</li><li>配置win-flex-bison<br>首先，将win_flex_bison-latest.zip复制到云主机,并解压。<br>随后，在VS2019中，点击右侧（或左侧）项目名，右键-&gt;生成依赖项-&gt;生成自定义。在弹出窗 口中点击查找现有的，然后进入win_flex-bison文件夹下，并依次进入\win_flex_bison_latest\custom_build_rules\文件中，选择”win_flex_bison_custom_build.targets”文件。随后在当前的对话框中，勾选win-flex-bison</li><li>点击项目名，右键-&gt;添加-&gt;现有项，导入scan.l和gram.y文件，这两个文件在项目的XDSQL 1.0<br>simple文件夹路径下。</li><li>打开gram.y文件，根据实验指导.ppt中的步骤，增加文法产生式，补充对新增终结符、非终结符的<br>声明，增加文法产生式的语义动作。引用lib文件和头文件的工作无需实验者完成。完成这些工作后<br>编译gram.y，根据编译信息不断修改yacc代码直到通过编译。</li><li>打开QueryProcessor.cpp，根据实验指导.ppt与类与函数手册.pdf补充deleteTable函数的实现。</li><li>点击生成-&gt;生成解决方案，将scan.l和gram.y转为对应的gram.tab.cpp和scan.flex.cpp文件，并导<br>入项目中；</li><li>运行项目，使用以下sql测试：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">delete from student where sdept=&#x27;ee&#x27;;</span><br><span class="line">select * from student;</span><br><span class="line">delete from student where sdept=&#x27;cs&#x27; and sage &lt;20;</span><br><span class="line">select * from student;</span><br><span class="line">delete from student where sdept=&#x27;cs&#x27; or not(sage&gt;=20);</span><br><span class="line">select * from student;</span><br></pre></td></tr></table></figure><h2 id="实验代码"><a href="#实验代码" class="headerlink" title="实验代码"></a>实验代码</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%&#123;</span><br><span class="line">#pragma comment(lib,&quot;QueryProcessor_simple.lib&quot;)</span><br><span class="line">#pragma comment(lib,&quot;values.lib&quot;)</span><br><span class="line">#pragma comment(lib,&quot;colinf.lib&quot;)</span><br><span class="line">#pragma comment(lib,&quot;colsinf.lib&quot;)</span><br><span class="line">#pragma comment(lib,&quot;colvalue.lib&quot;)</span><br><span class="line">#pragma comment(lib,&quot;colsvalue.lib&quot;)</span><br><span class="line">#pragma comment(lib,&quot;condition.lib&quot;)</span><br><span class="line">#pragma comment(lib,&quot;conditiontype.lib&quot;)</span><br><span class="line">#include &quot;QueryProcessor.h&quot;</span><br><span class="line">#include &quot;values.h&quot;</span><br><span class="line">#include &quot;colinf.h&quot;</span><br><span class="line">#include &quot;colsinf.h&quot;</span><br><span class="line">#include &quot;colvalue.h&quot;</span><br><span class="line">#include &quot;colsvalue.h&quot;</span><br><span class="line">#include &quot;condition.h&quot;</span><br><span class="line">#include &quot;conditiontype.h&quot;</span><br><span class="line"></span><br><span class="line">extern int yylex(void);</span><br><span class="line">void yyerror(const char* );</span><br><span class="line">%&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">%union&#123;</span><br><span class="line">    /*ID,string,数字字面量的值*/</span><br><span class="line">    class values* value;</span><br><span class="line">    /*单个列列元数据的值*/</span><br><span class="line">    class colinf* single_colinf;</span><br><span class="line">    /*多个列的列元数据*/    </span><br><span class="line">    class colsinf* colsinf;</span><br><span class="line">    /*列的值*/</span><br><span class="line">    class colvalue* colval;</span><br><span class="line">    /*多个列的值*/</span><br><span class="line">    class colsvalue* colsval;</span><br><span class="line">    /*算数表达式的值*/</span><br><span class="line">    int calval;</span><br><span class="line">    /*条件表达式的值*/</span><br><span class="line">    class condition* cond;</span><br><span class="line">    /*比较表达式左,右部分的值*/</span><br><span class="line">    class conditiontype* comp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/*终结符 correct*/</span><br><span class="line">%token CREATE USE SHOW DROP DATABASE DATABASES TABLE TABLES INSERT INTO VALUES </span><br><span class="line">%token FROM WHERE SET UPDATE SELECT EXIT DELETE</span><br><span class="line">%token NEWLINE CHAR INT </span><br><span class="line">%token&lt;value&gt; ID STRING NUMBER</span><br><span class="line">%token &#x27;,&#x27; &#x27;;&#x27; &#x27;.&#x27;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/*非终结符 correct*/</span><br><span class="line">%type&lt;value&gt; dbname tablename colname </span><br><span class="line">%type&lt;single_colinf&gt; col coltype</span><br><span class="line">%type&lt;colsinf&gt; cols </span><br><span class="line">%type&lt;colval&gt; colvalue setconf</span><br><span class="line">%type&lt;colsval&gt; colsvalue colsname tablecols setconfs tables tablecolconf</span><br><span class="line">%type&lt;calval&gt; cal comp_op</span><br><span class="line">%type&lt;cond&gt; condition conditions</span><br><span class="line">%type&lt;comp&gt; comparator tablecol</span><br><span class="line"></span><br><span class="line">/*优先级*/</span><br><span class="line">%left OR</span><br><span class="line">%left AND</span><br><span class="line">%right NOT</span><br><span class="line">%nonassoc &#x27;=&#x27; &#x27;&gt;&#x27; &#x27;&lt;&#x27;</span><br><span class="line">%left &#x27;+&#x27; &#x27;-&#x27;</span><br><span class="line">%left &#x27;*&#x27; &#x27;/&#x27;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/*文法产生式*/</span><br><span class="line">%%</span><br><span class="line">start : line    &#123;&#125;</span><br><span class="line">      | start line    &#123;&#125;</span><br><span class="line">;</span><br><span class="line">line  : NEWLINE    &#123;cout&lt;&lt;endl&lt;&lt;&quot;SQL&gt;&gt;&quot;;&#125;</span><br><span class="line">      | statement NEWLINE    &#123;cout&lt;&lt;endl&lt;&lt;&quot;SQL&gt;&gt;&quot;;&#125;</span><br><span class="line">     ;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">statement : createdb&#123;&#125;</span><br><span class="line">      | usedb&#123;&#125;</span><br><span class="line">      | showdb&#123;&#125;</span><br><span class="line">      | dropdb&#123;&#125;</span><br><span class="line">      | createsql&#123;&#125;</span><br><span class="line">      | droptable &#123;&#125;</span><br><span class="line">      | showtables    &#123;&#125;</span><br><span class="line">      | inserttable    &#123;&#125;</span><br><span class="line">      | deletetable    &#123;&#125;</span><br><span class="line">      | updatetable    &#123;&#125;</span><br><span class="line">      | selecttable    &#123;&#125;</span><br><span class="line">      | exit    &#123;&#125;</span><br><span class="line">;</span><br><span class="line"></span><br><span class="line">exit : EXIT    &#123; return 0;&#125;</span><br><span class="line">;</span><br><span class="line"></span><br><span class="line">/*创建数据库*/</span><br><span class="line">createdb : CREATE DATABASE dbname &#x27;;&#x27;    &#123;</span><br><span class="line">    QueryProcessor qp;</span><br><span class="line">    qp.createDB($3-&gt;getStringValue());&#125;</span><br><span class="line">;</span><br><span class="line"></span><br><span class="line">/*使用数据库*/</span><br><span class="line">usedb : USE DATABASE dbname &#x27;;&#x27;    &#123;</span><br><span class="line">    QueryProcessor qp;</span><br><span class="line">    qp.useDB($3-&gt;getStringValue());</span><br><span class="line">&#125;</span><br><span class="line">;</span><br><span class="line"></span><br><span class="line">/*展示库元数据*/</span><br><span class="line">showdb : SHOW DATABASES &#x27;;&#x27;    &#123;</span><br><span class="line">    QueryProcessor qp;</span><br><span class="line">    qp.showDB();</span><br><span class="line">&#125;</span><br><span class="line">;</span><br><span class="line"></span><br><span class="line">/*删除数据库*/</span><br><span class="line">dropdb : DROP DATABASE dbname &#x27;;&#x27;    &#123;</span><br><span class="line">    QueryProcessor qp;</span><br><span class="line">    qp.dropDB($3-&gt;getStringValue());</span><br><span class="line">&#125;</span><br><span class="line">;</span><br><span class="line"></span><br><span class="line">dbname : ID    &#123;    $$=$1;    &#125;</span><br><span class="line">;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/*创建表*/</span><br><span class="line">createsql : CREATE TABLE tablename &#x27;(&#x27; cols &#x27;)&#x27; &#x27;;&#x27;    &#123;</span><br><span class="line">    QueryProcessor qp;</span><br><span class="line">    qp.createTable($3-&gt;getStringValue(),$5-&gt;vec);</span><br><span class="line">&#125;</span><br><span class="line">;</span><br><span class="line"></span><br><span class="line">tablename : ID    &#123;$$=$1;&#125;</span><br><span class="line">;</span><br><span class="line"></span><br><span class="line">cols : col    &#123;</span><br><span class="line">    $$=new colsinf();</span><br><span class="line">    ($$-&gt;vec).push_back($1);</span><br><span class="line">     &#125;</span><br><span class="line">     | cols &#x27;,&#x27; col    &#123;</span><br><span class="line">     $$=$1;</span><br><span class="line">     ($$-&gt;vec).push_back($3);</span><br><span class="line">     &#125;</span><br><span class="line">;</span><br><span class="line"></span><br><span class="line">col : colname coltype &#123;</span><br><span class="line">    $$=$2;</span><br><span class="line">    $$-&gt;setColName($1-&gt;getStringValue());</span><br><span class="line">&#125;</span><br><span class="line">;</span><br><span class="line"></span><br><span class="line">colname : ID    &#123;$$=$1;&#125;</span><br><span class="line">;</span><br><span class="line"></span><br><span class="line">coltype : INT    &#123;</span><br><span class="line">     $$=new colinf();</span><br><span class="line">     $$-&gt;setColType(3);</span><br><span class="line">     $$-&gt;setColLength(4);</span><br><span class="line">    &#125;</span><br><span class="line">    | CHAR &#x27;(&#x27; NUMBER &#x27;)&#x27;    &#123;</span><br><span class="line">     $$=new colinf();</span><br><span class="line">     $$-&gt;setColType(2);</span><br><span class="line">     $$-&gt;setColLength($3-&gt;getDigitsValue());</span><br><span class="line">    &#125;</span><br><span class="line">;</span><br><span class="line"></span><br><span class="line">/*删除表*/</span><br><span class="line">droptable : DROP TABLE tablename &#x27;;&#x27;    &#123;</span><br><span class="line">    QueryProcessor qp;</span><br><span class="line">    qp.dropTable($3-&gt;getStringValue());</span><br><span class="line">&#125;</span><br><span class="line">;</span><br><span class="line"></span><br><span class="line">/*展示数据库中的表元数据和列元数据*/</span><br><span class="line">showtables : SHOW TABLES &#x27;;&#x27;    &#123;</span><br><span class="line">    QueryProcessor qp;</span><br><span class="line">    qp.showTable();</span><br><span class="line">&#125;</span><br><span class="line">;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/*将元组插入表*/</span><br><span class="line">inserttable : INSERT INTO tablename VALUES &#x27;(&#x27; colsvalue &#x27;)&#x27; &#x27;;&#x27;    &#123;</span><br><span class="line">    QueryProcessor qp;</span><br><span class="line">    qp.insertTable($3-&gt;getStringValue(),*$6,1);</span><br><span class="line">&#125;</span><br><span class="line">    | INSERT INTO tablename &#x27;(&#x27; colsname &#x27;)&#x27; VALUES &#x27;(&#x27; colsvalue &#x27;)&#x27; &#x27;;&#x27;    &#123;</span><br><span class="line">    /*先将colsename中的表名依次加入colsname的容器中*/</span><br><span class="line">    for(int i=0;i&lt; $9-&gt;vec.size();i++)&#123;</span><br><span class="line">    $9-&gt;vec[i]-&gt;setColName($5-&gt;vec[i]-&gt;getColName());</span><br><span class="line">    &#125;</span><br><span class="line">    /*释放colsname的内存*/</span><br><span class="line">    delete $5;</span><br><span class="line"></span><br><span class="line">    QueryProcessor qp;    </span><br><span class="line">    qp.insertTable($3-&gt;getStringValue(),*$9,2);</span><br><span class="line">&#125;</span><br><span class="line">;</span><br><span class="line"></span><br><span class="line">colsname : colname    &#123;</span><br><span class="line">    $$=new colsvalue();</span><br><span class="line">    string str=$1-&gt;getStringValue();</span><br><span class="line">    colvalue* cv=new colvalue();</span><br><span class="line">    cv-&gt;setColName(str);</span><br><span class="line">    ($$-&gt;vec).push_back(cv);</span><br><span class="line">&#125;</span><br><span class="line">     | colsname &#x27;,&#x27; colname&#123;</span><br><span class="line">    string str=$3-&gt;getStringValue();</span><br><span class="line">    colvalue* cv=new colvalue();</span><br><span class="line">    cv-&gt;setColName(str);</span><br><span class="line">    $$=$1;</span><br><span class="line">    ($$-&gt;vec).push_back(cv);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">colsvalue : colvalue    &#123;</span><br><span class="line">    $$=new colsvalue();</span><br><span class="line">    ($$-&gt;vec).push_back($1);</span><br><span class="line">&#125;</span><br><span class="line">      | colsvalue &#x27;,&#x27; colvalue    &#123;</span><br><span class="line">    $$=$1;</span><br><span class="line">    ($$-&gt;vec).push_back($3);   </span><br><span class="line">&#125;</span><br><span class="line">;</span><br><span class="line"></span><br><span class="line">colvalue : cal    &#123;</span><br><span class="line">    $$=new colvalue();</span><br><span class="line">    $$-&gt;setColType(3);</span><br><span class="line">    $$-&gt;setDigitsValue($1);</span><br><span class="line">&#125;</span><br><span class="line">     | STRING    &#123;</span><br><span class="line">    $$=new colvalue();</span><br><span class="line">    $$-&gt;setColType(2);</span><br><span class="line">    $$-&gt;setStringValue($1-&gt;getStringValue());</span><br><span class="line">&#125;</span><br><span class="line">;</span><br><span class="line"></span><br><span class="line">/*算数表达式*/</span><br><span class="line">cal : NUMBER &#123;</span><br><span class="line">    $$=$1-&gt;getDigitsValue();</span><br><span class="line">&#125;</span><br><span class="line">    | cal &#x27;+&#x27; cal &#123;</span><br><span class="line">    $$=$1+$3;    </span><br><span class="line">&#125;</span><br><span class="line">    | cal &#x27;-&#x27; cal &#123;</span><br><span class="line">    $$=$1-$3;</span><br><span class="line">&#125;</span><br><span class="line">    | cal &#x27;*&#x27; cal &#123;</span><br><span class="line">    $$=$1*$3;    </span><br><span class="line">&#125;    | cal &#x27;/&#x27; cal &#123;</span><br><span class="line">    $$=$1/$3;    </span><br><span class="line">&#125;   | &#x27;-&#x27; cal &#123;</span><br><span class="line">    $$=-$2;    </span><br><span class="line">&#125;    | &#x27;(&#x27; cal &#x27;)&#x27; &#123;</span><br><span class="line">    $$=$2;    </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/*逻辑表达式*/</span><br><span class="line">conditions : condition    &#123;</span><br><span class="line">    $$ = $1;</span><br><span class="line">&#125;</span><br><span class="line">    | conditions AND conditions &#123;</span><br><span class="line">    $$ = new condition();</span><br><span class="line">    $$-&gt;iscond = true;</span><br><span class="line">    $$-&gt;comp_cond = 1;</span><br><span class="line">    conditiontype cond1, cond2;</span><br><span class="line">    cond1.cond = $1;</span><br><span class="line">    cond1.type = 4;</span><br><span class="line">    $$-&gt;left = cond1;</span><br><span class="line">    cond2.cond = $3;</span><br><span class="line">    cond2.type=4;</span><br><span class="line">    $$-&gt;right= cond2;</span><br><span class="line">&#125;</span><br><span class="line">    | conditions OR conditions &#123;</span><br><span class="line">    $$ = new condition();</span><br><span class="line">    $$-&gt;iscond = true;</span><br><span class="line">    $$-&gt;comp_cond = 2;</span><br><span class="line">    conditiontype left, right;</span><br><span class="line">    left.cond = $1;</span><br><span class="line">    left.type = 4;</span><br><span class="line">    $$-&gt;left= left;</span><br><span class="line">    right.cond = $3;</span><br><span class="line">    right.type = 4;</span><br><span class="line">    $$-&gt;right= right;</span><br><span class="line">&#125;</span><br><span class="line">    | NOT conditions       &#123;</span><br><span class="line">    $$ = new condition();</span><br><span class="line">    $$-&gt;iscond = true;</span><br><span class="line">    $$-&gt;comp_cond = 3;</span><br><span class="line">    conditiontype right;</span><br><span class="line">    right.cond = $2;</span><br><span class="line">    right.type = 4;</span><br><span class="line">    $$-&gt;right= right;</span><br><span class="line">&#125;</span><br><span class="line">    |&#x27;(&#x27; conditions &#x27;)&#x27;    &#123;</span><br><span class="line">    $$ = $2;    </span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line">/*比较表达式*/</span><br><span class="line">condition : comparator comp_op comparator &#123;</span><br><span class="line">    $$ = new condition();</span><br><span class="line">    $$-&gt;iscond = false;</span><br><span class="line">    $$-&gt;comp_op = $2;</span><br><span class="line">    $$-&gt;left= *$1;</span><br><span class="line">    $$-&gt;right= *$3;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">comparator : cal &#123;</span><br><span class="line">    $$ = new conditiontype();</span><br><span class="line">    $$-&gt;type = 3;</span><br><span class="line">    $$-&gt;digits = $1;</span><br><span class="line">&#125;    | STRING &#123;</span><br><span class="line">    $$ = new conditiontype();</span><br><span class="line">    $$-&gt;type = 2;</span><br><span class="line">    $$-&gt;str = $1-&gt;getStringValue();</span><br><span class="line">&#125;    | tablecol &#123;</span><br><span class="line">    $$ = $1;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">/*比较运算符*/</span><br><span class="line">comp_op : &#x27;&lt;&#x27; &#123;</span><br><span class="line">    $$=1;</span><br><span class="line">&#125;    | &#x27;&gt;&#x27; &#123;</span><br><span class="line">    $$=2;</span><br><span class="line">&#125;    | &#x27;&lt;&#x27; &#x27;=&#x27; &#123;</span><br><span class="line">    $$=3;</span><br><span class="line">&#125;    | &#x27;&gt;&#x27; &#x27;=&#x27; &#123;</span><br><span class="line">    $$=4;</span><br><span class="line">&#125;    | &#x27;=&#x27; &#123;</span><br><span class="line">    $$=5;</span><br><span class="line">&#125;    | &#x27;!&#x27; &#x27;=&#x27; &#123;</span><br><span class="line">    $$=6;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/*表名.列名形式或列名形式 correct*/</span><br><span class="line"></span><br><span class="line">tablecol : colname &#123;</span><br><span class="line">    $$ = new conditiontype();</span><br><span class="line">    $$-&gt;type = 1;</span><br><span class="line">    colvalue* cv = new colvalue();</span><br><span class="line">    string str=$1-&gt;getStringValue();</span><br><span class="line">    cv-&gt;setColName(str);</span><br><span class="line">    $$-&gt;col = cv;</span><br><span class="line">&#125;    | tablename &#x27;.&#x27; colname &#123;</span><br><span class="line">    $$ = new conditiontype();</span><br><span class="line">    $$-&gt;type = 1;</span><br><span class="line">    colvalue* cv = new colvalue();</span><br><span class="line">    cv-&gt;setTableName($1-&gt;getStringValue());</span><br><span class="line">    string str=$3-&gt;getStringValue();</span><br><span class="line">    cv-&gt;setColName(str);</span><br><span class="line">    $$-&gt;col = cv;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/*删除元组 correct*/</span><br><span class="line">deletetable : DELETE FROM tablename &#x27;;&#x27; &#123;</span><br><span class="line">    QueryProcessor qp;</span><br><span class="line">    qp.deleteTable($3-&gt;getStringValue(), NULL);</span><br><span class="line">&#125;</span><br><span class="line">    | DELETE FROM tablename WHERE conditions &#x27;;&#x27; &#123;</span><br><span class="line">    QueryProcessor qp;</span><br><span class="line">    qp.deleteTable($3-&gt;getStringValue(), $5);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/*更新元组*/</span><br><span class="line">updatetable : UPDATE tablename SET setconfs &#x27;;&#x27;    &#123;</span><br><span class="line">    QueryProcessor qp;</span><br><span class="line">    qp.updateTable($2-&gt;getStringValue(),*$4,NULL);</span><br><span class="line">&#125;</span><br><span class="line">    | UPDATE tablename SET setconfs WHERE conditions &#x27;;&#x27;    &#123;</span><br><span class="line">    QueryProcessor qp;    </span><br><span class="line">    qp.updateTable($2-&gt;getStringValue(),*$4,$6);</span><br><span class="line">&#125;</span><br><span class="line">;</span><br><span class="line"></span><br><span class="line">/*更新赋值的语句*/</span><br><span class="line">setconfs : setconf    &#123;</span><br><span class="line">    $$=new colsvalue();</span><br><span class="line">    ($$-&gt;vec).push_back($1);</span><br><span class="line">&#125;</span><br><span class="line">     | setconfs &#x27;,&#x27; setconf    &#123;</span><br><span class="line">    $$=$1;</span><br><span class="line">    ($$-&gt;vec).push_back($3);     </span><br><span class="line">&#125;</span><br><span class="line">;</span><br><span class="line"></span><br><span class="line">setconf : tablecol &#x27;=&#x27; STRING    &#123;</span><br><span class="line">    $$=$1-&gt;col;</span><br><span class="line">    $$-&gt;setStringValue($3-&gt;getStringValue());</span><br><span class="line">&#125;</span><br><span class="line">    | tablecol &#x27;=&#x27; cal    &#123;</span><br><span class="line">    $$=$1-&gt;col;</span><br><span class="line">    $$-&gt;setDigitsValue($3);</span><br><span class="line">&#125;</span><br><span class="line">;</span><br><span class="line"></span><br><span class="line">/*纯列名或表名.列名形式*/</span><br><span class="line">tablecols : tablecol    &#123;</span><br><span class="line">    $$=new colsvalue();</span><br><span class="line">    ($$-&gt;vec).push_back($1-&gt;col);</span><br><span class="line">&#125;</span><br><span class="line">      | tablecols &#x27;,&#x27; tablecol    &#123;</span><br><span class="line">    $$=$1;</span><br><span class="line">    ($$-&gt;vec).push_back($3-&gt;col);      </span><br><span class="line">&#125;</span><br><span class="line">;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/*select table*/</span><br><span class="line">selecttable : SELECT tablecolconf FROM tables &#x27;;&#x27;    &#123;</span><br><span class="line">    QueryProcessor qp;</span><br><span class="line">    qp.selectTable(*$4,*$2,NULL);</span><br><span class="line">&#125;</span><br><span class="line">    | SELECT tablecolconf FROM tables WHERE conditions &#x27;;&#x27;    &#123;</span><br><span class="line">    QueryProcessor qp;</span><br><span class="line">    qp.selectTable(*$4,*$2,$6);    </span><br><span class="line">&#125;</span><br><span class="line">;</span><br><span class="line"></span><br><span class="line">tablecolconf : &#x27;*&#x27;    &#123;</span><br><span class="line">    $$=new colsvalue();</span><br><span class="line">    $$-&gt;isALL=true;</span><br><span class="line">&#125;</span><br><span class="line">     | tablecols    &#123;</span><br><span class="line">    $$=$1;    </span><br><span class="line">&#125;</span><br><span class="line">;</span><br><span class="line"></span><br><span class="line">tables : tablename    &#123;</span><br><span class="line">    $$=new colsvalue();</span><br><span class="line">    colvalue* cv=new colvalue();</span><br><span class="line">    cv-&gt;setTableName($1-&gt;getStringValue());</span><br><span class="line">    ($$-&gt;vec).push_back(cv);</span><br><span class="line">&#125;</span><br><span class="line">       | tables &#x27;,&#x27; tablename    &#123;</span><br><span class="line">    $$=$1;</span><br><span class="line">    colvalue* cv=new colvalue();</span><br><span class="line">    cv-&gt;setTableName($3-&gt;getStringValue());</span><br><span class="line">    ($$-&gt;vec).push_back(cv);</span><br><span class="line">&#125;</span><br><span class="line">;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">%%</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">void yyerror(const char* str)&#123;</span><br><span class="line">    cout&lt;&lt;std::string(str)&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="QueryProcessor-cpp"><a href="#QueryProcessor-cpp" class="headerlink" title="QueryProcessor.cpp"></a>QueryProcessor.cpp</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &quot;QueryProcessor.h&quot;</span><br><span class="line"></span><br><span class="line">void QueryProcessor::deleteTable(string tablename, condition* root) &#123;</span><br><span class="line">if (usedatabase.empty()) &#123;</span><br><span class="line">cout &lt;&lt; &quot;error: not using a database&quot; &lt;&lt; endl;</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line">if ((mdm-&gt;selectDBTable(usedatabase, tablename)).size() == 0) &#123;</span><br><span class="line">cout &lt;&lt; tablename + &quot;is not Exist, Delete Table error&quot; &lt;&lt; endl;</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line">int rowlength = (mdm-&gt;selectDBTable(usedatabase, tablename))[0]-&gt;getRowLength();</span><br><span class="line">StorageNode sn(SQLFILE + usedatabase + &quot;/&quot; + tablename + &quot;.dat&quot;, rowlength);</span><br><span class="line">if (!root) &#123;</span><br><span class="line">while (!sn.isEOF()) &#123;</span><br><span class="line">char* row = sn.rnd_next();</span><br><span class="line">if (row == NULL) continue;</span><br><span class="line">sn.delete_row();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">root-&gt;addTableName(tablename);</span><br><span class="line">std::vector&lt;colNode*&gt; tablecol = mdm-&gt;selectTableCol(usedatabase, tablename, &quot;&quot;);</span><br><span class="line">colsvalue csv(tablecol);</span><br><span class="line">conditionLinkData(csv.vec, root);</span><br><span class="line">while (!sn.isEOF()) &#123;</span><br><span class="line">char* row = sn.rnd_next();</span><br><span class="line">if (row == NULL) continue;</span><br><span class="line">csv.setCols(row, mdm, usedatabase, tablename);</span><br><span class="line">if (root-&gt;dealConditions().first == true) &#123;</span><br><span class="line">sn.delete_row();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">delete root;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h2><img src="../../public/img/block/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-06-13%20125803.png"></li></ol><h2 id="实验心得"><a href="#实验心得" class="headerlink" title="实验心得"></a>实验心得</h2><p>三次实验结束，最为困难的是第三次实验，困扰我时间最多，因为要一个个对照手册编写功能，还面领着众多报错，还好看到群里讨论直到要用win_bison –yacc -dv gram.y的命令排错，最后也成功完成了实验，收获颇多。</p>]]></content>
      
      
      <categories>
          
          <category> 实验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编译原理 语法分析</title>
      <link href="/2022/06/13/%E5%AE%9E%E9%AA%8C%E4%BA%8C/"/>
      <url>/2022/06/13/%E5%AE%9E%E9%AA%8C%E4%BA%8C/</url>
      
        <content type="html"><![CDATA[<h1 id="编译原理实验二：语法分析"><a href="#编译原理实验二：语法分析" class="headerlink" title="编译原理实验二：语法分析"></a>编译原理实验二：语法分析</h1><p><strong>姓名</strong>：郭健祥<br><strong>学号</strong>：19030100392<br><strong>阿里云账号</strong>：vgs_31<br><strong>账号ID</strong>：1381522983556954</p><hr><h2 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h2><p>了解语法分析生成器YACC，学会编写简单的YACC文件，实现对SQL语句中创建数据库、创建表、增删改查语句的识别。</p><h2 id="实验介绍"><a href="#实验介绍" class="headerlink" title="实验介绍"></a>实验介绍</h2><p>YACC是一个语法分析器生成器，接受产生式表示的语法规则，生成识别产生式所描述语言的源程序，不同版本的YACC支持不同的高级语言，如C、C++、Java等。<br>YACC文件和Lex文件相同，也是由三部分组成，分别是定义、规则、用户子程序。其中定义负责描述高级语言的相关声明（如c中的#include）和相关符号定义。规则负责说明语法规则的正则式和对应的相关说明。用户子程序则是用高级语言来表达用户在语法分析中要实现的对应功能。<br>本次实验采用C/C++作为YACC生成的源程序语言。所要实现的功能如下：</p><ul><li>创建语句，包括创建数据库和数据表</li><li>插入语句，包括有列名的插入和无列名的插入</li><li>查询语句，包括查找全部、查找指定数据列，有条件的单表查询和有条件的多表查询</li><li>更新语句，包括有条件的更新和无条件的更新</li><li>删除语句，包括有条件的删除和无条件的删除<h2 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h2></li></ul><ol><li>连接远程云主机</li><li>将Git-2.33.1-64-bit.exe复制到云主机（直接复制即可）</li><li>安装git，安装步骤直接Next即可</li><li>运行cmd，输入以下指令<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd C:\</span><br><span class="line">mkdir code</span><br><span class="line">cd code</span><br><span class="line">git clone https://github.com/flytigerman/Compiler-yacc.git</span><br></pre></td></tr></table></figure></li><li>将VS2019复制到云主机，并进行安装，只安装使用C++的桌面开发即可，安装大概20分钟左右。</li><li>打开VS2019，新建C++空项目</li><li>配置win-flex-bison,首先，将win_flex_bison-latest.zip复制到云主机,并解压。随后，在VS2019中，点击右侧（或左侧）新建的项目名，右键-&gt;生成依赖项-&gt;生成自定义。在弹出窗口中点击查找现有的，然后进入win_flex-bison文件夹下，并依次进入\win_flex_bison_latest\custom_build_rules\文件夹中，选择”win_flex_bison_custom_build.targets”文件。随后在当前的对话框中，勾选win-flex-bison</li><li>点击项目名，右键-&gt;添加-&gt;现有项，导入YACC模板文件SQLyacc.l和SQlyacc.y（文件路径为C:\code\Compiler-yacc）</li><li>打开SQLyacc.y，编写YACC语言，实现相关功能</li><li>点击项目名，右键-&gt;生成解决方案。</li><li>将生成的cpp文件和头文件采用第8步的方法加入项目中（都要添加）</li><li>打开项目属性，选择C/C++，点击语言，将符合模式改为否，否则会报错</li><li>点击本地运行，生成可执行文件。<h2 id="实验代码"><a href="#实验代码" class="headerlink" title="实验代码"></a>实验代码</h2><h3 id="lex"><a href="#lex" class="headerlink" title="lex"></a>lex</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%&#123;</span><br><span class="line">/****************************************************************************</span><br><span class="line">SQL.l</span><br><span class="line">ParserWizard generated Lex file.</span><br><span class="line">Date: 2022年6月10日</span><br><span class="line">****************************************************************************/</span><br><span class="line">#include &quot;SQLyacc.tab.h&quot;</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int yylex(void);</span><br><span class="line"></span><br><span class="line">%&#125;</span><br><span class="line"></span><br><span class="line">%option noyywrap</span><br><span class="line">%option caseless</span><br><span class="line"></span><br><span class="line">digit    [0-9]</span><br><span class="line">digits    &#123;digit&#125;+</span><br><span class="line">optional_fraction    (&quot;.&quot;&#123;digits&#125;)</span><br><span class="line">letter [a-zA-Z][a-zA-Z0-9_]*</span><br><span class="line">string \&#x27;[^\&#x27;]*\&#x27;</span><br><span class="line">strings \&quot;[^\&quot;]*\&quot;</span><br><span class="line"></span><br><span class="line">create create</span><br><span class="line">drop drop</span><br><span class="line">use use</span><br><span class="line">select select</span><br><span class="line">insert insert</span><br><span class="line">delete delete</span><br><span class="line">update update</span><br><span class="line">from from</span><br><span class="line">where where</span><br><span class="line">into into</span><br><span class="line">values values</span><br><span class="line">set set</span><br><span class="line">database database</span><br><span class="line">table table</span><br><span class="line">and and</span><br><span class="line">or or</span><br><span class="line">int int</span><br><span class="line">double double</span><br><span class="line">char char</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">%%</span><br><span class="line"></span><br><span class="line">&#123;create&#125; &#123;return CREATE;&#125;</span><br><span class="line">&#123;drop&#125; &#123; return DROP;&#125;</span><br><span class="line">&#123;use&#125; &#123;return USE;&#125;</span><br><span class="line">&#123;select&#125; &#123; return SELECT;&#125; </span><br><span class="line">&#123;insert&#125; &#123; return INSERT;&#125; </span><br><span class="line">&#123;delete&#125; &#123; return DELETE;&#125;</span><br><span class="line">&#123;update&#125; &#123; return UPDATE;&#125;</span><br><span class="line">&#123;from&#125; &#123; return FROM;&#125;</span><br><span class="line">&#123;where&#125; &#123; return WHERE;&#125;</span><br><span class="line">&#123;into&#125; &#123; return INTO;&#125;</span><br><span class="line">&#123;values&#125; &#123; return VALUES;&#125;</span><br><span class="line">&#123;set&#125; &#123; return SET;&#125; </span><br><span class="line">&#123;database&#125; &#123; return DATABASE;&#125; </span><br><span class="line">&#123;table&#125; &#123; return TABLE;&#125; </span><br><span class="line"></span><br><span class="line">&#123;and&#125; &#123; return AND;&#125;</span><br><span class="line">&#123;or&#125; &#123;return OR;&#125;</span><br><span class="line"></span><br><span class="line">&#123;int&#125; &#123; return INT;&#125;</span><br><span class="line">&#123;double&#125; &#123; return DOUBLE;&#125;</span><br><span class="line">&#123;char&#125; &#123; return CHAR;&#125;</span><br><span class="line"></span><br><span class="line">&#123;letter&#125; &#123;return ID;&#125;</span><br><span class="line">&#123;string&#125; &#123;return STRING;&#125;</span><br><span class="line">&#123;strings&#125; &#123;return STRINGS;&#125;</span><br><span class="line">            </span><br><span class="line">&#123;digits&#125; &#123;return INTNUMBER;&#125;</span><br><span class="line">&#123;digits&#125;&#123;optional_fraction&#125; &#123;return DOUBLENUMBER;&#125;</span><br><span class="line"></span><br><span class="line">&quot;+&quot; &#123; return &#x27;+&#x27;; &#125;</span><br><span class="line">&quot;-&quot; &#123; return &#x27;-&#x27;; &#125;</span><br><span class="line">&quot;*&quot; &#123; return &#x27;*&#x27;; &#125;</span><br><span class="line">&quot;/&quot; &#123; return &#x27;/&#x27;; &#125;</span><br><span class="line">&quot;(&quot; &#123; return &#x27;(&#x27;; &#125;</span><br><span class="line">&quot;)&quot; &#123; return &#x27;)&#x27;; &#125;</span><br><span class="line">&quot;,&quot; &#123; return &#x27;,&#x27;; &#125;</span><br><span class="line">&quot;;&quot; &#123; return &#x27;;&#x27;; &#125;</span><br><span class="line">&quot;.&quot; &#123; return &#x27;.&#x27;; &#125;</span><br><span class="line">&quot;&gt;&quot; &#123; return &#x27;&gt;&#x27;; &#125;</span><br><span class="line">&quot;&lt;&quot; &#123; return &#x27;&lt;&#x27;; &#125;</span><br><span class="line">&quot;=&quot; &#123; return &#x27;=&#x27;; &#125;</span><br><span class="line">&quot;!&quot; &#123; return &#x27;!&#x27;; &#125;</span><br><span class="line"></span><br><span class="line">&quot;\n&quot; &#123; return 0; &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">%%</span><br></pre></td></tr></table></figure><h3 id="yacc"><a href="#yacc" class="headerlink" title="yacc"></a>yacc</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%&#123;</span><br><span class="line">    #include&lt;stdio.h&gt;</span><br><span class="line">    extern int yylex(void);</span><br><span class="line">    int yyerror(char * msg);</span><br><span class="line"></span><br><span class="line">%&#125;</span><br><span class="line"></span><br><span class="line">%token NUMBER CREATE DROP USE SELECT INSERT DELETE UPDATE </span><br><span class="line">%token FROM WHERE INTO VALUES SET DATABASE TABLE AND OR INT </span><br><span class="line">%token DOUBLE CHAR ID STRING STRINGS INTNUMBER DOUBLENUMBER</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">%left OR</span><br><span class="line">%left AND</span><br><span class="line">%left &#x27;&gt;&#x27;,&#x27;&lt;&#x27;,&#x27;=&#x27;,&quot;!=&quot;,&quot;&gt;=&quot;,&quot;&lt;=&quot;</span><br><span class="line">%left &#x27;+&#x27;,&#x27;-&#x27; </span><br><span class="line">%left &#x27;*&#x27;,&#x27;/&#x27;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">%%</span><br><span class="line"></span><br><span class="line">statements: statements</span><br><span class="line">    |statement</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">statement: createTablesql    &#123;printf(&quot;识别结果：CREATE TABLE;\n&quot;);&#125;;</span><br><span class="line">    | createDBsql    &#123;printf(&quot;识别结果：CREATE DATABASE;\n&quot;);&#125;;</span><br><span class="line">    | expr </span><br><span class="line">    | useDBsql    &#123;printf(&quot;识别结果：USE DATABASE;\n&quot;);&#125;;</span><br><span class="line">    | insertDBsql    &#123;printf(&quot;识别结果：INSERT\n&quot;);&#125;;</span><br><span class="line">    | selectDBql    &#123;printf(&quot;识别结果：SELECT\n&quot;);&#125;;</span><br><span class="line">    | updateDBsql    &#123;printf(&quot;识别结果：UPDATE\n&quot;);&#125;;</span><br><span class="line">    | deleteDBsql    &#123;printf(&quot;识别结果：DELETE\n&quot;);&#125;;</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">createTablesql: CREATE TABLE table &#x27;(&#x27;fieldsdefinition &#x27;)&#x27;&#x27;;&#x27;;    </span><br><span class="line">createDBsql: CREATE DATABASE ID&#x27;;&#x27;;    </span><br><span class="line">useDBsql: USE DATABASE ID&#x27;;&#x27;;    </span><br><span class="line">insertDBsql: INSERT INTO table VALUES&#x27;(&#x27;values&#x27;)&#x27;&#x27;;&#x27;    </span><br><span class="line">     |INSERT INTO table&#x27;(&#x27;tables&#x27;)&#x27; VALUES&#x27;(&#x27;values&#x27;)&#x27;&#x27;;&#x27;    </span><br><span class="line">selectDBql: SELECT fields_star FROM tables&#x27;;&#x27;    </span><br><span class="line">    |SELECT fields_star FROM tables WHERE conditions&#x27;;&#x27;    </span><br><span class="line">    ;</span><br><span class="line">updateDBsql: UPDATE table SET updateValues&#x27;;&#x27;    </span><br><span class="line">     |    UPDATE table SET updateValues WHERE conditions&#x27;;&#x27;    </span><br><span class="line">     ;</span><br><span class="line">deleteDBsql:  DELETE FROM table&#x27;;&#x27;    </span><br><span class="line">      |DELETE FROM table WHERE conditions&#x27;;&#x27;    </span><br><span class="line">      ;</span><br><span class="line"></span><br><span class="line">fields_star:    table_fields</span><br><span class="line">    |&#x27;*&#x27;</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">table_fields:    table_fields&#x27;,&#x27; table_field</span><br><span class="line">    |table_field</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">table_field:    table&#x27;.&#x27;field</span><br><span class="line">    |field    </span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">tables:    tables&#x27;,&#x27;table</span><br><span class="line">    |table</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">fieldsdefinition:    fieldsdefinition&#x27;,&#x27; field_type ;</span><br><span class="line">    |field_type</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">updateValues:   updateValues&#x27;,&#x27; updateLeft&#x27;=&#x27;value</span><br><span class="line">    |updateLeft&#x27;=&#x27;value</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">updateLeft: ID</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">values: values&#x27;,&#x27; value</span><br><span class="line">    |value</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">conditions: condition </span><br><span class="line">    | &#x27;(&#x27; conditions &#x27;)&#x27; </span><br><span class="line">    | conditions AND conditions </span><br><span class="line">    | conditions OR conditions</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">condition:  comp_left comp_op comp_right;</span><br><span class="line"></span><br><span class="line">comp_left:  table_field</span><br><span class="line">    |INTNUMBER</span><br><span class="line">    |DOUBLENUMBER</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">comp_right:  table_field</span><br><span class="line">    |INTNUMBER</span><br><span class="line">    |DOUBLENUMBER</span><br><span class="line">    ;</span><br><span class="line">    </span><br><span class="line">comp_op: &#x27;&gt;&#x27;|&#x27;&lt;&#x27;|&#x27;=&#x27;|&#x27;!&#x27;&#x27;=&#x27;|&#x27;&gt;&#x27;&#x27;=&#x27;|&#x27;&lt;&#x27;&#x27;=&#x27;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">value: INTNUMBER|DOUBLENUMBER|ID;</span><br><span class="line">field_type: field type ; </span><br><span class="line">type: CHAR&#x27;(&#x27;INTNUMBER&#x27;)&#x27; | INT;</span><br><span class="line">table: ID;</span><br><span class="line">field: ID;</span><br><span class="line"></span><br><span class="line">expr    : expr &#x27;+&#x27; expr    &#123; printf(&quot;识别加法\n&quot;); &#125;</span><br><span class="line">    | expr &#x27;-&#x27; expr    &#123; printf(&quot;识别减法\n&quot;); &#125;</span><br><span class="line">    | expr &#x27;*&#x27; expr    &#123; printf(&quot;识别乘法\n&quot;); &#125;</span><br><span class="line">    | expr &#x27;/&#x27; expr    &#123; printf(&quot;识别除法\n&quot;); &#125;</span><br><span class="line">    | &#x27;( expr )&#x27;    &#123; printf(&quot;识别括号\n&quot;); &#125;</span><br><span class="line">    | INTNUMBER    &#123; printf(&quot;识别数字\n&quot;); &#125;</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">%%</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;    </span><br><span class="line">    </span><br><span class="line">    while(1)&#123;</span><br><span class="line">    yyparse();</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int yyerror(char * msg)</span><br><span class="line">&#123;</span><br><span class="line">    printf(&quot;%s is error in line\n&quot;,msg);</span><br><span class="line">    return 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h2><img src="../../public/img/block/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-06-13%20155040.png"></li></ol>]]></content>
      
      
      <categories>
          
          <category> 实验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编译原理 词法分析</title>
      <link href="/2022/06/12/%E5%AE%9E%E9%AA%8C%E4%B8%80/"/>
      <url>/2022/06/12/%E5%AE%9E%E9%AA%8C%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<h1 id="编译原理实验一：词法分析"><a href="#编译原理实验一：词法分析" class="headerlink" title="编译原理实验一：词法分析"></a>编译原理实验一：词法分析</h1><p><strong>姓名</strong>：郭健祥<br><strong>学号</strong>：19030100392<br><strong>阿里云账号</strong>：vgs_31<br><strong>账号ID</strong>：1381522983556954</p><hr><h2 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h2><p>了解词法分析生成器Lex，学会编写简单的Lex文件，实现对SQL语句中整型数、浮点数、变量名、关键字的识别。</p><h2 id="实验介绍"><a href="#实验介绍" class="headerlink" title="实验介绍"></a>实验介绍</h2><p>Lex是一个词法分析器生成器，接受正规式表示的词法规则，生成识别正规式所描述语言的源程序，不同 版本的Lex支持不同的高级语言，如C、C++、Java等。<br>Lex文件由三部分组成，分别是定义、规则、用户子程序。其中定义负责描述高级语言的相关声明（如c 中的#include）和辅助定义正则表达式。规则负责说明词法规则的正则式和对应的相关说明。用户子程 序则是用高级语言来表达用户在词法分析中要实现的对应功能。<br>本次实验采用C/C++作为Lex生成的源程序语言。所要实现的功能如下： </p><ul><li>整型数据识别 </li><li>浮点数据识别 </li><li>字符串识别 </li><li>变量名识别 </li><li>关键字识别：create、table、database、use、select、insert、delete、update、from、where、into、values、set、int、double、char、and、or <h2 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h2></li></ul><ol><li>连接远程云主机<br><img src="%E5%AE%9E%E9%AA%8C%E4%B8%80/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-06-13%20153651.png"></li><li>将Git-2.33.1-64-bit.exe复制到云主机（直接复制即可）</li><li>安装git，安装步骤直接Next即可</li><li>运行cmd，输入以下指令<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd C:\</span><br><span class="line">mkdir code</span><br><span class="line">cd code</span><br><span class="line">git clone https://github.com/flytigerman/Compiler-lex.git</span><br></pre></td></tr></table></figure></li><li>将VS2019复制到云主机，并进行安装，只安装使用C++的桌面开发即可，安装大概20分钟左右。</li><li>打开VS2019，新建C++空项目</li><li>配置win-flex-bison首先，将win_flex_bison-latest.zip复制到云主机,并解压。随后，在VS2019中，点击右侧（或左侧）新建的项目名，右键-&gt;生成依赖项-&gt;生成自定义。在弹出窗口中点击查找现有的，然后进入win_flex-bison文件夹下，并依次进入\win_flex_bison_latest\custom_build_rules\文件夹中，选择”win_flex_bison_custom_build.targets”文件。随后在当前的对话框中，勾选win-flex-bison。</li><li>点击项目名，右键-&gt;添加-&gt;现有项，导入Lex模板文件SQLlex.l（文件路径为C:\code\Compiler_lex）</li><li>编写Lex语言，实现相关功能</li><li>点击项目名，右键-&gt;生成解决方案。</li><li>将生成的cpp文件采用第8步的方法加入项目中</li><li>点击本地运行，生成可执行文件。<h2 id="实验代码"><a href="#实验代码" class="headerlink" title="实验代码"></a>实验代码</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%option caseless</span><br><span class="line"></span><br><span class="line">%&#123;</span><br><span class="line">/****************************************************************************</span><br><span class="line">SQL.l</span><br><span class="line">ParserWizard generated Lex file.</span><br><span class="line"></span><br><span class="line">Date: 2022年6月9日</span><br><span class="line">****************************************************************************/</span><br><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;string.h&gt;</span><br><span class="line"></span><br><span class="line">#define ID 0</span><br><span class="line">#define NUMBER 1</span><br><span class="line">#define CREATE 2</span><br><span class="line">#define TABLE 3</span><br><span class="line">#define CHAR 4</span><br><span class="line">#define INT 5</span><br><span class="line">#define INSERT 6</span><br><span class="line">#define UPDATE 7</span><br><span class="line">#define DELETE 8</span><br><span class="line">#define AND 9</span><br><span class="line">#define OR 11</span><br><span class="line">#define DOUBLE 12</span><br><span class="line">#define FROM 13</span><br><span class="line">#define WHERE 14</span><br><span class="line">#define DATABASE 15</span><br><span class="line">#define VALUES 16</span><br><span class="line">#define SET 17</span><br><span class="line">#define USE 18</span><br><span class="line">#define INTO 19</span><br><span class="line">#define SELECT 20</span><br><span class="line"></span><br><span class="line">int yylex(void);</span><br><span class="line">%&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">char [a-zA-Z]</span><br><span class="line">digit [0-9]</span><br><span class="line">digits &#123;digit&#125;+</span><br><span class="line">optional_fraction (&quot;.&quot;&#123;digits&#125;)?</span><br><span class="line">optional_exponent (E[+-]?&#123;digits&#125;)?</span><br><span class="line"></span><br><span class="line">%%</span><br><span class="line">create &#123;printf(&quot;CREATE&quot;);return CREATE;&#125;</span><br><span class="line">table &#123;printf(&quot;TABLE&quot;);return TABLE;&#125;</span><br><span class="line">database &#123;printf(&quot;DATABASE&quot;);return DATABASE;&#125;</span><br><span class="line">use &#123;printf(&quot;USE&quot;);return USE;&#125;</span><br><span class="line">select &#123;printf(&quot;SELECT&quot;);return SELECT;&#125;</span><br><span class="line">insert &#123;printf(&quot;INSERT&quot;);return INSERT;&#125;</span><br><span class="line">delete &#123;printf(&quot;DELETE&quot;);return DELETE;&#125;</span><br><span class="line">update &#123;printf(&quot;UPDATE&quot;);return UPDATE;&#125;</span><br><span class="line">from &#123;printf(&quot;FROM&quot;);return FROM;&#125;</span><br><span class="line">where &#123;printf(&quot;WHERE&quot;);return WHERE;&#125;</span><br><span class="line">into &#123;printf(&quot;INTO&quot;);return INTO;&#125;</span><br><span class="line">values &#123;printf(&quot;VALUES&quot;);return VALUES;&#125;</span><br><span class="line">set &#123;printf(&quot;SET&quot;);return SET;&#125;</span><br><span class="line">int &#123;printf(&quot;INT&quot;);return INT;&#125;</span><br><span class="line">double &#123;printf(&quot;DOUBLE&quot;);return DOUBLE;&#125;</span><br><span class="line">char &#123;printf(&quot;CHAR&quot;);return CHAR;&#125;</span><br><span class="line">and &#123;printf(&quot;AND&quot;);return AND;&#125;</span><br><span class="line">or &#123;printf(&quot;OR&quot;);return OR;&#125;</span><br><span class="line"></span><br><span class="line">&#123;char&#125;(&#123;char&#125;|&#123;digit&#125;)* &#123;printf(&quot;变量名:%s&quot;,yytext);return ID;&#125;</span><br><span class="line">&#123;digits&#125;&#123;optional_fraction&#125;&#123;optional_exponent&#125; &#123;printf(&quot;整型数:%s&quot;,yytext);return NUMBER;&#125;</span><br><span class="line">&quot;;&quot;|&quot;(&quot;|&quot;)&quot;|&quot;,&quot;  &#123;printf(&quot;%c&quot;,yytext[0]);return yytext[0];&#125;</span><br><span class="line"></span><br><span class="line">%%</span><br><span class="line">int yywrap() </span><br><span class="line">&#123;</span><br><span class="line">    return 1;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    for(;;)</span><br><span class="line">    yylex();</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h2><img src="../../public/img/block/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-06-13%20153650.png"></li></ol>]]></content>
      
      
      <categories>
          
          <category> 实验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>遗传算法java实现</title>
      <link href="/2022/06/03/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD_%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95/"/>
      <url>/2022/06/03/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD_%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="遗传算法java实现"><a href="#遗传算法java实现" class="headerlink" title="遗传算法java实现"></a>遗传算法java实现</h1><h2 id="实验目标"><a href="#实验目标" class="headerlink" title="实验目标"></a>实验目标</h2><p><img src="../../public/img/block/QQ%E6%88%AA%E5%9B%BE20220629161610.png"></p><h2 id="实验代码"><a href="#实验代码" class="headerlink" title="实验代码"></a>实验代码</h2><p>GA.java</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line"> * @summary: 遗传算法解二元函数最大值</span><br><span class="line"> * @Author: Jianxiang Guo</span><br><span class="line"> * @Date: 2022-06-03 17:08:46</span><br><span class="line"> * @LastEditTime: 2022-06-18 16:11:36</span><br><span class="line"> * @FilePath: \人工智能导论\GA\src\GA\GA.java</span><br><span class="line"> */</span><br><span class="line">package GA;</span><br><span class="line"></span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.Random;</span><br><span class="line"></span><br><span class="line">import static java.lang.Math.*;</span><br><span class="line"></span><br><span class="line">public class GA &#123;</span><br><span class="line"></span><br><span class="line">    public static final int RANDOMMAX = 32767; // 防止越界</span><br><span class="line">    public static final double PI = 3.1415926535897932384626433832795;</span><br><span class="line"></span><br><span class="line">    public ArrayList&lt;String&gt; pop = new ArrayList&lt;&gt;();// 存储迭代结果</span><br><span class="line">    public static final int NUMBER = 1000;// 种群规模</span><br><span class="line">    private double pc = 0.25;// 交叉概率</span><br><span class="line">    private double pm = 0.01;// 变异概率</span><br><span class="line"></span><br><span class="line">    private int length = 39;// 编码长度</span><br><span class="line">    private int x1length = 21;// 编码长度</span><br><span class="line">    private int x2length = 18;// 编码长度</span><br><span class="line"></span><br><span class="line">    // 变量界限</span><br><span class="line">    private double x1leftBound = -2.9;</span><br><span class="line">    private double x1rightBound = 12.0;</span><br><span class="line">    private double x2leftBound = 4.2;</span><br><span class="line">    private double x2rightBound = 5.7;</span><br><span class="line"></span><br><span class="line">    String maxString;// 最大个体基因</span><br><span class="line">    private int t; // 进化代数</span><br><span class="line"></span><br><span class="line">    // 迭代</span><br><span class="line">    public void incre_t() &#123;</span><br><span class="line">        t++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getT() &#123;</span><br><span class="line">        return t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setT(int t) &#123;</span><br><span class="line">        this.t = t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 初始化种群</span><br><span class="line">    public void init() &#123;</span><br><span class="line">        Random r = new Random();</span><br><span class="line">        for (int i = 0; i &lt; NUMBER; i++) &#123;</span><br><span class="line">            String s = &quot;&quot;;</span><br><span class="line">            for (int j = 0; j &lt; length; j++) &#123;</span><br><span class="line">                // 生成随机数偶数置1 奇数置0</span><br><span class="line">                int rr = r.nextInt();</span><br><span class="line">                if (rr % 2 == 0)</span><br><span class="line">                    s = s + &quot;1&quot;;</span><br><span class="line">                else</span><br><span class="line">                    s = s + &quot;0&quot;;</span><br><span class="line">            &#125;</span><br><span class="line">            pop.add(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 二进制字符串转化成整形</span><br><span class="line">    public static int transform(String s) &#123;</span><br><span class="line">        int n = 0;</span><br><span class="line">        for (int i = 0; i &lt; s.length(); i++) &#123;</span><br><span class="line">            n = n * 2 + s.charAt(i) - &#x27;0&#x27;;</span><br><span class="line">        &#125;</span><br><span class="line">        return n;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 解码并计算适应度</span><br><span class="line">    public Individual fitness(String s) &#123;</span><br><span class="line">        Individual t = new Individual();</span><br><span class="line">        double x1a = x1leftBound;</span><br><span class="line">        double x1b = x1rightBound;</span><br><span class="line">        double x2a = x2leftBound;</span><br><span class="line">        double x2b = x2rightBound;</span><br><span class="line">        // 截取x1的字符串</span><br><span class="line">        String s1 = s.substring(0, x1length);</span><br><span class="line">        String s2 = s.substring(x1length, length);</span><br><span class="line">        int t1 = transform(s1);</span><br><span class="line">        int t2 = transform(s2);</span><br><span class="line"></span><br><span class="line">        // 带入函数值</span><br><span class="line">        t.setX1(x1a + (x1b - x1a) * t1 / (pow(2.0, x1length) - 1));</span><br><span class="line">        t.setX2(x2a + (x2b - x2a) * t2 / (pow(2.0, x2length) - 1));</span><br><span class="line">        t.setFit(21.5 + t.getX1() * sin(4 * PI * t.getX1()) + t.getX2() * sin(20 * PI * t.getX2()));</span><br><span class="line">        return t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 轮盘赌选择</span><br><span class="line">    public ArrayList&lt;String&gt; choose(ArrayList&lt;String&gt; population, int x) &#123;</span><br><span class="line">        double fitnessSum = 0;// 总适应度</span><br><span class="line">        ArrayList&lt;Double&gt; q = new ArrayList&lt;&gt;();// 圆盘分布率</span><br><span class="line">        ArrayList&lt;Individual&gt; indiList = new ArrayList&lt;&gt;();// 适应度数组</span><br><span class="line">        ArrayList&lt;String&gt; result = new ArrayList&lt;&gt;();// 选择结果</span><br><span class="line">        ArrayList&lt;Double&gt; random = new ArrayList&lt;&gt;();// 随机数数组</span><br><span class="line">        double p = 0;</span><br><span class="line"></span><br><span class="line">        // 获取随机数</span><br><span class="line">        for (int i = 0; i &lt; x; i++) &#123;</span><br><span class="line">            Random r = new Random();</span><br><span class="line">            // 加入下一个伪随机数</span><br><span class="line">            random.add(r.nextDouble());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 计算总适应度</span><br><span class="line">        for (int i = 0; i &lt; population.size(); i++) &#123;</span><br><span class="line">            Individual Indi = fitness(population.get(i));</span><br><span class="line">            indiList.add(Indi);</span><br><span class="line">            fitnessSum = fitnessSum + Indi.getFit();</span><br><span class="line">        &#125;</span><br><span class="line">        // 分布圆盘</span><br><span class="line">        for (int i = 0; i &lt; population.size(); i++) &#123;</span><br><span class="line">            Individual Indi = indiList.get(i);</span><br><span class="line">            p = p + Indi.getFit() / fitnessSum;</span><br><span class="line">            if (i == population.size() - 1)</span><br><span class="line">                q.add(1.0);</span><br><span class="line">            else</span><br><span class="line">                q.add(p);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        for (int i = 0; i &lt; random.size(); i++) &#123;</span><br><span class="line">            for (int j = 0; j &lt; q.size(); j++) &#123;</span><br><span class="line">                if (q.get(j) != 1.0 &amp;&amp; random.get(i) &gt; q.get(j) &amp;&amp; random.get(i) &lt;= q.get(j + 1)) &#123;</span><br><span class="line">                    result.add(population.get(j + 1));</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 两点交叉</span><br><span class="line">    public ArrayList&lt;String&gt; crossover(ArrayList&lt;String&gt; population) &#123;</span><br><span class="line">        ArrayList&lt;String&gt; result = new ArrayList&lt;&gt;();</span><br><span class="line">        for (int i = 0; i + 1 &lt; population.size(); i = i + 2) &#123;</span><br><span class="line">            String s1 = population.get(i);</span><br><span class="line">            String s2 = population.get(i + 1);</span><br><span class="line">            // 随机数控制交叉概率</span><br><span class="line">            Random r = new Random();</span><br><span class="line">            if (r.nextDouble() &lt; pc) &#123;</span><br><span class="line">                int i1 = (int) (r.nextDouble() * length);</span><br><span class="line">                int i2 = (int) (r.nextDouble() * length);</span><br><span class="line">                if (i1 &lt; i2) &#123;</span><br><span class="line">                    String sub1 = s1.substring(i1, i2 + 1);</span><br><span class="line">                    String sub2 = s2.substring(i1, i2 + 1);</span><br><span class="line">                    s1 = s1.substring(0, i1) + sub2 + s1.substring(i2 + 1, length);</span><br><span class="line">                    s2 = s2.substring(0, i1) + sub1 + s2.substring(i2 + 1, length);</span><br><span class="line">                    result.add(s1);</span><br><span class="line">                    result.add(s2);</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    if (i1 &gt; i2) &#123;</span><br><span class="line">                        String sub1 = s1.substring(i2, i1 + 1);</span><br><span class="line">                        String sub2 = s2.substring(i2, i1 + 1);</span><br><span class="line">                        s1 = s1.substring(0, i2) + sub2 + s1.substring(i1 + 1, length);</span><br><span class="line">                        s2 = s2.substring(0, i2) + sub1 + s2.substring(i1 + 1, length);</span><br><span class="line">                        result.add(s1);</span><br><span class="line">                        result.add(s2);</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        result.add(s1);</span><br><span class="line">                        result.add(s2);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                result.add(s1);</span><br><span class="line">                result.add(s2);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 单点变异</span><br><span class="line">    public String mutation(String s) &#123;</span><br><span class="line">        Random r = new Random();</span><br><span class="line">        // 0 1交换</span><br><span class="line">        for (int i = 0; i &lt; length; i++) &#123;</span><br><span class="line">            if (r.nextDouble() &lt; pm) &#123;</span><br><span class="line">                if (s.charAt(i) == &#x27;0&#x27;) &#123;</span><br><span class="line">                    StringBuilder strBuilder = new StringBuilder(s);</span><br><span class="line">                    strBuilder.setCharAt(i, &#x27;1&#x27;);</span><br><span class="line">                    s = strBuilder.toString();</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    StringBuilder strBuilder = new StringBuilder(s);</span><br><span class="line">                    strBuilder.setCharAt(i, &#x27;0&#x27;);</span><br><span class="line">                    s = strBuilder.toString();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 返回本轮适应度值最大的个体</span><br><span class="line">    public Individual print(ArrayList&lt;String&gt; generation) &#123;</span><br><span class="line">        Individual max = new Individual();</span><br><span class="line">        for (int i = 0; i &lt; generation.size(); i++) &#123;</span><br><span class="line">            Individual individual = fitness(generation.get(i));</span><br><span class="line">            if (individual.getFit() &gt; max.getFit()) &#123;</span><br><span class="line">                max = individual;</span><br><span class="line">                maxString = generation.get(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return max;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        GA aiWork = new GA();</span><br><span class="line">        Individual Max = new Individual();</span><br><span class="line">        aiWork.init();</span><br><span class="line">        int j = 0;</span><br><span class="line"></span><br><span class="line">        while (aiWork.getT() &lt; 100) &#123;</span><br><span class="line">            double max1 = 0;</span><br><span class="line">            double max2 = 0;</span><br><span class="line">            String s1 = null;</span><br><span class="line">            String s2 = null;</span><br><span class="line">            Individual max;</span><br><span class="line">            ArrayList&lt;String&gt; pop1, pop2, popNew, pop3 = new ArrayList&lt;&gt;();</span><br><span class="line">            pop1 = aiWork.choose(aiWork.pop, NUMBER);// 轮盘赌</span><br><span class="line">            pop2 = aiWork.crossover(pop1);// 两点交叉</span><br><span class="line"></span><br><span class="line">            for (int i = 0; i &lt; pop2.size(); i++) &#123;</span><br><span class="line">                String s = aiWork.mutation(pop2.get(i));</span><br><span class="line">                pop3.add(s);// 单点变异</span><br><span class="line">                double d = aiWork.fitness(pop2.get(i)).getFit();</span><br><span class="line"></span><br><span class="line">                if (d &gt; max1) &#123;</span><br><span class="line">                    s1 = pop2.get(i);</span><br><span class="line">                    max1 = d;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            for (int i = 0; i &lt; pop3.size(); i++) &#123;</span><br><span class="line">                double d = aiWork.fitness(pop3.get(i)).getFit();</span><br><span class="line">                if (d &gt; max2) &#123;</span><br><span class="line">                    s2 = pop3.get(i);</span><br><span class="line">                    max2 = d;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            // popNew存储最大适应度结果</span><br><span class="line">            popNew = aiWork.choose(aiWork.pop, NUMBER - 2);</span><br><span class="line">            popNew.add(s1);</span><br><span class="line">            popNew.add(s2);</span><br><span class="line">            aiWork.pop = popNew;</span><br><span class="line">            max = aiWork.print(aiWork.pop);</span><br><span class="line">            if (max.getFit() &gt; Max.getFit()) &#123;</span><br><span class="line">                System.out.println((j + 1) + &quot;  x1:&quot; + max.getX1() + &quot;  x2:&quot; + max.getX2() + &quot;  max:&quot; + max.getFit());</span><br><span class="line">                Max = max;</span><br><span class="line">                aiWork.pop.add(aiWork.maxString);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                System.out.println((j + 1) + &quot;  x1:&quot; + Max.getX1() + &quot;  x2:&quot; + Max.getX2() + &quot;  max:&quot; + Max.getFit());</span><br><span class="line">            &#125;</span><br><span class="line">            aiWork.incre_t();</span><br><span class="line"></span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(aiWork.maxString);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>individual.java</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line"> * @summary: </span><br><span class="line"> * @Author: Jianxiang Guo</span><br><span class="line"> * @Date: 2022-06-03 15:58:42</span><br><span class="line"> * @LastEditTime: 2022-06-03 17:05:09</span><br><span class="line"> * @FilePath: \homework\AI\src\GA\Individual.java</span><br><span class="line"> */</span><br><span class="line">package GA;</span><br><span class="line"></span><br><span class="line">public class Individual &#123;</span><br><span class="line"></span><br><span class="line">    double x1, x2;</span><br><span class="line">    double fit;</span><br><span class="line"></span><br><span class="line">    public double getFit() &#123;</span><br><span class="line">        return fit;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setX1(double d) &#123;</span><br><span class="line">        this.x1 = d;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setX2(double d) &#123;</span><br><span class="line">        this.x2 = d;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public double getX1() &#123;</span><br><span class="line">        return x1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public double getX2() &#123;</span><br><span class="line">        return x2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setFit(double d) &#123;</span><br><span class="line">        this.fit = d;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 实验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数学一考纲</title>
      <link href="/2022/03/27/%E6%95%B0%E5%AD%A6%E4%B8%80/"/>
      <url>/2022/03/27/%E6%95%B0%E5%AD%A6%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<h1 id="考研考试形式和试卷结构"><a href="#考研考试形式和试卷结构" class="headerlink" title="考研考试形式和试卷结构"></a><strong>考研考试形式和试卷结构</strong></h1><p>一、试卷满分及考试时间：试卷满分为150分，考试时间为180分钟.</p><p>二、答题方式：答题方式为闭卷、笔试.</p><p>三、试卷内容结构：高等教学约60%;线性代数约20%;概率论与数理统计约20%.</p><p>四、试卷题型结构：</p><p>单选题10小题，每小题5分，共50分</p><p>填空题 6小题，每小题5分，共30分</p><p>解答题(包括证明题)7 小题，共70分</p><h1 id="高等数学"><a href="#高等数学" class="headerlink" title="高等数学"></a><strong>高等数学</strong></h1><h2 id="一、函数、极限、连续"><a href="#一、函数、极限、连续" class="headerlink" title="一、函数、极限、连续"></a>一、函数、极限、连续</h2><p>函数的概念及表示法</p><p>函数的有界性、单调性、周期性和奇偶性</p><p>复合函数、反函数、分段函数和隐函数</p><p>基本初等函数的性质及其图形、初等函数、函数关系的建立</p><p>数列极限与函数极限的定义及其性质</p><p>函数的左极限和右极限</p><p>无穷小量和无穷大量的概念及其关系</p><p>无穷小量的性质及无穷小量的比较</p><p>极限的四则运算</p><p>极限存在的两个准则</p><p>单调有界准则和夹逼准则</p><p>两个重要极限：</p><p><img src="http://cdn.download.chinakaoyan.com/wwwfile/2021/20210917102100.png" alt="img"></p><p><img src="http://cdn.download.chinakaoyan.com/wwwfile/2021/20210917102101.png" alt="img"></p><p>函数连续的概念</p><p>函数间断点的类型</p><p>初等函数的连续性</p><p>闭区间上连续函数的性质.</p><p>考试要求</p><p>1.理解函数的概念，掌握函数的表示法，会建立应用问题的函数关系.</p><p>2.了解函数的有界性、单调性、周期性和奇偶性.</p><p>3.理解复合函数及分段函数的概念，了解反函数及隐函数的概念.</p><p>4.掌握基本初等函数的性质及其图形，了解初等函数的概念.</p><p>5.理解极限的概念，理解函数左极限与右极限的概念以及函数极限存在与左极限、右极限之间的关系.</p><p>6.掌握极限的性质及四则运算法则.</p><p>7.掌握极限存在的两个准则，并会利用它们求极限，掌握利用两个重要极限求极限的方法.</p><p>8.理解无穷小量、无穷大量的概念，掌握无穷小量的比较方法，会用等价无穷小量求极限.</p><p>9.理解函数连续性的概念(含左连续与右连续)，会判别函数间断点的类型.</p><p>10.了解连续函数的性质和初等函数的连续性，理解闭区间上连续函数的性质(有界性、最大值和最小值定理、介值定理)，并会应用这些性质.</p><h2 id="二、一元函数微分学"><a href="#二、一元函数微分学" class="headerlink" title="二、一元函数微分学"></a>二、一元函数微分学</h2><p>导数和微分的概念</p><p>导数的几何意义和物理意义</p><p>函数的可导性与连续性之间的关系</p><p>平面曲线的切线和法线</p><p>导数和微分的四则运算</p><p>基本初等函数的导数</p><p>复合函数、反函数、隐函数以及参数方程所确定的函数的微分法</p><p>高阶导数、一阶微分形式的不变性</p><p>微分中值定理</p><p>洛必达(L’Hospital)法则</p><p>函数单调性的判别</p><p>函数的极值</p><p>函数图形的凹凸性</p><p>拐点及渐近线</p><p>函数图形的描绘函数的最大值与最小值</p><p>弧微分及曲率的概念</p><p>曲率圆与曲率半径</p><p>考试要求</p><p>1.理解导数和微分的概念，理解导数与微分的关系，理解导数的几何意义，会求平面曲线的切线方程和法线方程，了解导数的物理意义，会用导数描述一些物理量，理解函数的可导性与连续性之间的关系.</p><p>2.掌握导数的四则运算法则和复合函数的求导法则，掌握基本初等函数的导数公式.了解微分的四则运算法则和一阶微分形式的不变性，会求函数的微分.</p><p>3.了解高阶导数的概念，会求简单函数的高阶导数.</p><p>4.会求分段函数的导数，会求隐函数和由参数方程所确定的函数以及反函数的导数.</p><p>5.理解并会用罗尔(Rolle)定理、拉格朗日(Lagrange)中值定理和泰勒(Taylor)定理，了解并会用柯西(Cauchy)中值定理.</p><p>6.掌握用洛必达法则求未定式极限的方法.</p><p>7.理解函数的极值概念，掌握用导数判断函数的单调性和求函数极值的方法，掌握函数最大值和最小值的求法及其应用.</p><p>8.会用导数判断函数图形的凹凸性(注：在区间内，设函数具有二阶导数.当时，的图形是凹的;当时，的图形是凸的)，会求函数图形的拐点以及水平、铅直和斜渐近线，会描绘函数的图形.</p><p>9.了解曲率、曲率圆与曲率半径的概念，会计算曲率和曲率半径.</p><h2 id="三、一元函数积分学"><a href="#三、一元函数积分学" class="headerlink" title="三、一元函数积分学"></a>三、一元函数积分学</h2><p>原函数和不定积分的概念</p><p>不定积分的基本性质</p><p>基本积分公式</p><p>定积分的概念和基本性质</p><p>定积分中值定理</p><p>积分上限的函数及其导数</p><p>牛顿-莱布尼茨(Newton-Leibniz)公式</p><p>不定积分和定积分的换元积分法与分部积分法</p><p>有理函数、三角函数的有理式和简单无理函数的积分</p><p>反常(广义)积分</p><p>定积分的应用.</p><p>考试要求</p><p>1.理解原函数的概念，理解不定积分和定积分的概念.</p><p>2.掌握不定积分的基本公式，掌握不定积分和定积分的性质及定积分中值定理，掌握换元积分法与分部积分法.</p><p>3.会求有理函数、三角函数有理式和简单无理函数的积分.</p><p>4.理解积分上限的函数，会求它的导数，掌握牛顿-莱布尼茨公式.</p><p>5.理解反常积分的概念，了解反常积分收敛的比较判别法，会计算反常积分.</p><p>6.掌握用定积分表达和计算一些几何量与物理量(平面图形的面积、平面曲线的弧长、旋转体的体积及侧面积、平行截面面积为已知的立体体积、功、引力、压力、质心、形心等)及函数的平均值.</p><h2 id="四、向量代数和空间解析几何"><a href="#四、向量代数和空间解析几何" class="headerlink" title="四、向量代数和空间解析几何"></a>四、向量代数和空间解析几何</h2><p>向量的概念</p><p>向量的线性运算</p><p>向量的数量积和向量积</p><p>向量的混合积</p><p>两向量垂直及平行的条件</p><p>两向量的夹角</p><p>向量的坐标表达式及其运算</p><p>单位向量、方向数与方向余弦</p><p>曲面方程和空间曲线方程的概念</p><p>平面方程、直线方程</p><p>平面与平面及平面与直线及直线与直线的夹角以及平行和垂直的条件</p><p>点到平面和点到直线的距离</p><p>球面、柱面、旋转曲面、常用的二次曲面方程及其图形</p><p>空间曲线的参数方程和一般方程</p><p>空间曲线在坐标面上的投影曲线方程.</p><p>考试要求</p><p>1.理解空间直角坐标系，理解向量的概念及其表示.</p><p>2.掌握向量的运算(线性运算、数量积、向量积、混合积)，了解两个向量垂直、平行的条件.</p><p>3.理解单位向量、方向数与方向余弦、向量的坐标表达式，掌握用坐标表达式进行向量运算的方法.</p><p>4.掌握平面方程和直线方程及其求法.</p><p>5.会求平面与平面、平面与直线、直线与直线之间的夹角，并会利用平面、直线的相互关系(平行、垂直、相交等))解决有关问题.</p><p>6.会求点到直线以及点到平面的距离.</p><p>7.了解曲面方程和空间曲线方程的概念.</p><p>8.了解常用二次曲面的方程及其图形，会求简单的柱面和旋转曲面的方程.</p><p>9.了解空间曲线的参数方程和一般方程.了解空间曲线在坐标平面上的投影，并会求该投影曲线的方程.</p><h2 id="五、多元函数微分学"><a href="#五、多元函数微分学" class="headerlink" title="五、多元函数微分学"></a>五、多元函数微分学</h2><p>多元函数的概念</p><p>二元函数的几何意义</p><p>二元函数的极限与连续的概念</p><p>有界闭区域上多元连续函数的性质</p><p>多元函数的偏导数和全微分</p><p>全微分存在的必要条件和充分条件.</p><p>多元复合函数</p><p>隐函数的求导法</p><p>二阶偏导数</p><p>方向导数和梯度</p><p>空间曲线的切线和法平面</p><p>曲面的切平面和法线</p><p>二元函数的二阶泰勒公式</p><p>多元函数的极值和条件极值</p><p>多元函数的最大值、最小值及其简单应用.</p><p>考试要求</p><p>1.理解多元函数的概念，理解二元函数的几何意义.</p><p>2.了解二元函数的极限与连续的概念以及有界闭区域上连续函数的性质.</p><p>3.理解多元函数偏导数和全微分的概念，会求全微分，了解全微分存在的必要条件和充分条件，了解全微分形式的不变性.</p><p>4.理解方向导数与梯度的概念，并掌握其计算方法.</p><p>5.掌握多元复合函数一阶、二阶偏导数的求法.</p><p>6.了解隐函数存在定理，会求多元隐函数的偏导数.</p><p>7.了解空间曲线的切线和法平面及曲面的切平面和法线的概念，会求它们的方程.</p><p>8.了解二元函数的二阶泰勒公式.</p><p>9.理解多元函数极值和条件极值的概念，掌握多元函数极值存在的必要条件，了解二元函数极值存在的充分条件，会求二元函数的极值，会用拉格朗日乘数法求条件极值，会求简单多元函数的最大值和最小值，并会解决一些简单的应用问题.</p><h2 id="六、多元函数积分学"><a href="#六、多元函数积分学" class="headerlink" title="六、多元函数积分学"></a>六、多元函数积分学</h2><p>二重积分与三重积分的概念、性质、计算和应用</p><p>两类曲线积分的概念及性质及计算</p><p>两类曲线积分的关系</p><p>格林(Green)公式</p><p>平面曲线积分与路径无关的条件</p><p>二元函数全微分的原函数</p><p>两类曲面积分的概念及性质及计算</p><p>两类曲面积分的关系</p><p>高斯(Gauss)公式</p><p>斯托克斯(Stokes)公式</p><p>散度和旋度的概念及计算</p><p>曲线积分和曲面积分的应用.</p><p>考试要求</p><p>1.理解二重积分、三重积分的概念，了解重积分的性质，了解二重积分的中值定理.</p><p>2.掌握二重积分的计算方法(直角坐标、极坐标)，会计算三重积分(直角坐标、柱面坐标、球面坐标).</p><p>3.理解两类曲线积分的概念，了解两类曲线积分的性质及两类曲线积分的关系.</p><p>4.掌握计算两类曲线积分的方法.</p><p>5.掌握格林公式并会运用平面曲线积分与路径无关的条件，会求二元函数全微分的原函数.</p><p>6.了解两类曲面积分的概念、性质及两类曲面积分的关系，掌握计算两类曲面积分的方法，掌握用高斯公式计算曲面积分的方法，并会用斯托克斯公式计算曲线积分.</p><p>7.了解散度与旋度的概念，并会计算.</p><p>8.会用重积分、曲线积分及曲面积分求一些几何量与物理量(平面图形的面积、体积、曲面面积、弧长、质量、质心、、形心、转动惯量、引力、功及流量等).</p><h2 id="七、无穷级数"><a href="#七、无穷级数" class="headerlink" title="七、无穷级数"></a>七、无穷级数</h2><p>常数项级数的收敛与发散的概念</p><p>收敛级数的和的概念</p><p>级数的基本性质与收敛的必要条件</p><p>几何级数与级数及其收敛性</p><p>正项级数收敛性的判别法</p><p>交错级数与莱布尼茨定理</p><p>任意项级数的绝对收敛与条件收敛</p><p>函数项级数的收敛域与和函数的概念</p><p>幂级数及其收敛半径</p><p>收敛区间(指开区间)和收敛域</p><p>幂级数的和函数</p><p>幂级数在其收敛区间内的基本性质</p><p>简单幂级数的和函数的求法</p><p>初等函数的幂级数展开式</p><p>函数的傅里叶(Fourier)系数与傅里叶级数</p><p>狄利克雷(Dirichlet)定理</p><p>函数在[-ι,ι]上的傅里叶级数</p><p>函数在[0,ι]上的正弦级数和余弦级数.</p><p>考试要求</p><p>1.理解常数项级数收敛、发散以及收敛级数的和的概念，掌握级数的基本性质及收敛的必要条件.</p><p>2.掌握几何级数与级数的收敛与发散的条件.</p><p>3.掌握正项级数收敛性的比较判别法、比值判别法、根值判别法，会用积分判别法.</p><p>4.掌握交错级数的莱布尼茨判别法.</p><p>5.了解任意项级数绝对收敛与条件收敛的概念以及绝对收敛与收敛的关系.</p><p>6.了解函数项级数的收敛域及和函数的概念.</p><p>7.理解幂级数收敛半径的概念、并掌握幂级数的收敛半径、收敛区间及收敛域的求法.</p><p>8.了解幂级数在其收敛区间内的基本性质(和函数的连续性、逐项求导和逐项积分)，会求一些幂级数在收敛区间内的和函数，并会由此求出某些数项级数的和.</p><p>9.了解函数展开为泰勒级数的充分必要条件.</p><p>10.掌握麦克劳林(Maclaurin)展开式，会用它们将一些简单函数间接展开为幂级数.</p><p>11.了解傅里叶级数的概念和狄利克雷收敛定理，会将定义在[-ι,ι]上的函数展开为傅里叶级数，会将定义在[0,ι]上的函数展开为正弦级数与余弦级数，会写出傅里叶级数的和函数的表达式.</p><h2 id="八、常微分方程"><a href="#八、常微分方程" class="headerlink" title="八、常微分方程"></a>八、常微分方程</h2><p>常微分方程的基本概念</p><p>变量可分离的微分方程、齐次微分方程</p><p>一阶线性微分方程</p><p>伯努利(Bernoulli)方程</p><p>全微分方程</p><p>可用简单的变量代换求解的某些微分方程</p><p>可降阶的高阶微分方程</p><p>线性微分方程解的性质及解的结构定理</p><p>二阶常系数齐次线性微分方程</p><p>高于二阶的某些常系数齐次线性微分方程</p><p>简单的二阶常系数非齐次线性微分方程</p><p>欧拉(Euler)方程</p><p>微分方程的简单应用.</p><p>考试要求</p><p>1.了解微分方程及其阶、解、通解、初始条件和特解等概念.</p><p>2.掌握变量可分离的微分方程及一阶线性微分方程的解法.</p><p>3.会解齐次微分方程、伯努利方程和全微分方程，会用简单的变量代换解某些微分方程.</p><p>4.会用降阶法解下列形式的微分方程：y”=f(x)、y”= f(x,y’)和y”=f(y,y’).</p><p>5.理解线性微分方程解的性质及解的结构.</p><p>6.掌握二阶常系数齐次线性微分方程的解法，并会解某些高于二阶的常系数齐次线性微分方程.</p><p>7.会解自由项为多项式、指数函数、正弦函数、余弦函数以及它们的和与积的二阶常系数非齐次线性微分方程.</p><p>8.会解欧拉方程.</p><p>9.会用微分方程解决一些简单的应用问题.</p><h1 id="线性代数"><a href="#线性代数" class="headerlink" title="线性代数"></a><strong>线性代数</strong></h1><h2 id="一、行列式"><a href="#一、行列式" class="headerlink" title="一、行列式"></a>一、行列式</h2><p>行列式的概念和基本性质</p><p>行列式按行(列)展开定理</p><p>考试要求</p><p>1.了解行列式的概念，掌握行列式的性质.</p><p>2.会应用行列式的性质和行列式按行(列)展开定理计算行列式.</p><h2 id="二、矩阵"><a href="#二、矩阵" class="headerlink" title="二、矩阵"></a>二、矩阵</h2><p>矩阵的概念</p><p>矩阵的线性运算</p><p>矩阵的乘法</p><p>方阵的幂</p><p>方阵乘积的行列式</p><p>矩阵的转置</p><p>逆矩阵的概念和性质</p><p>矩阵可逆的充分必要条件</p><p>伴随矩阵、矩阵的初等变换</p><p>初等矩阵</p><p>矩阵的秩</p><p>矩阵的等价</p><p>分块矩阵及其运算.</p><p>考试要求</p><p>1.理解矩阵的概念，了解单位矩阵、数量矩阵、对角矩阵、三角矩阵、对称矩阵和反对称矩阵以及它们的性质.</p><p>2.掌握矩阵的线性运算、乘法、转置以及它们的运算规律，了解方阵的幂与方阵乘积的行列式的性质.</p><p>3.理解逆矩阵的概念，掌握逆矩阵的性质以及矩阵可逆的充分必要条件，理解伴随矩阵的概念，会用伴随矩阵求逆矩阵.</p><p>4.理解矩阵初等变换的概念，了解初等矩阵的性质和矩阵等价的概念，理解矩阵的秩的概念，掌握用初等变换求矩阵的秩和逆矩阵的方法.</p><p>5.了解分块矩阵及其运算.</p><h2 id="三、向量"><a href="#三、向量" class="headerlink" title="三、向量"></a>三、向量</h2><p>向量的概念</p><p>向量的线性组合与线性表示</p><p>向量组的线性相关与线性无关</p><p>向量组的极大线性无关组</p><p>等价向量组</p><p>向量组的秩</p><p>向量组的秩与矩阵的秩之间的关系</p><p>向量空间及其相关概念</p><p>n维向量空间的基变换和坐标变换</p><p>过渡矩阵</p><p>向量的内积</p><p>线性无关向量组的正交规范化方法</p><p>规范正交基</p><p>正交矩阵及其性质.</p><p>考试要求</p><p>1.理解n维向量、向量的线性组合与线性表示的概念.</p><p>2.理解向量组线性相关、线性无关的概念，掌握向量组线性相关、线性无关的有关性质及判别法.</p><p>3.理解向量组的极大线性无关组和向量组的秩的概念，会求向量组的极大线性无关组及秩.</p><p>4.理解向量组等价的概念，理解矩阵的秩与其行(列)向量组的秩之间的关系.</p><p>5.了解n维向量空间、子空间、基底、维数、坐标等概念.</p><p>6.了解基变换和坐标变换公式，会求过渡矩阵.</p><p>7.了解内积的概念，掌握线性无关向量组正交规范化的施密特(Schmidt)方法.</p><p>8.了解规范正交基、正交矩阵的概念以及它们的性质.</p><h2 id="四、线性方程组"><a href="#四、线性方程组" class="headerlink" title="四、线性方程组"></a>四、线性方程组</h2><p>线性方程组的克拉默(Cramer)法则</p><p>齐次线性方程组有非零解的充分必要条件</p><p>非齐次线性方程组有解的充分必要条件</p><p>线性方程组解的性质和解的结构</p><p>齐次线性方程组的基础解系和通解</p><p>解空间</p><p>非齐次线性方程组的通解.</p><p>考试要求</p><p>l.会用克拉默法则.</p><p>2.理解齐次线性方程组有非零解的充分必要条件及非齐次线性方程组有解的充分必要条件.</p><p>3.理解齐次线性方程组的基础解系、通解及解空间的概念，掌握齐次线性方程组的基础解系和通解的求法.</p><p>4.理解非齐次线性方程组解的结构及通解的概念.</p><p>5.掌握用初等行变换求解线性方程组的方法.</p><h2 id="五、矩阵的特征值和特征向量"><a href="#五、矩阵的特征值和特征向量" class="headerlink" title="五、矩阵的特征值和特征向量"></a>五、矩阵的特征值和特征向量</h2><p>矩阵的特征值和特征向量的概念及性质</p><p>相似变换及相似矩阵的概念及性质</p><p>矩阵可相似对角化的充分必要条件及相似对角矩阵</p><p>实对称矩阵的特征值</p><p>特征向量及其相似对角矩阵.</p><p>考试要求</p><p>1.理解矩阵的特征值和特征向量的概念及性质，会求矩阵的特征值和特征向量.</p><p>2.理解相似矩阵的概念、性质及矩阵可相似对角化的充分必要条件，掌握将矩阵化为相似对角矩阵的方法.</p><p>3.掌握实对称矩阵的特征值和特征向量的性质.</p><h2 id="六、二次型"><a href="#六、二次型" class="headerlink" title="六、二次型"></a>六、二次型</h2><p>二次型及其矩阵表示</p><p>合同变换与合同矩阵</p><p>二次型的秩</p><p>惯性定理</p><p>二次型的标准形和规范形</p><p>用正交变换和配方法化二次型为标准形</p><p>二次型及其矩阵的正定性.</p><p>考试要求</p><p>1.掌握二次型及其矩阵表示，了解二次型秩的概念，了解合同变换与合同矩阵的概念，了解二次型的标准形、规范形的概念以及惯性定理.</p><p>2.掌握用正交变换化二次型为标准形的方法，会用配方法化二次型为标准形.</p><p>3.理解正定二次型、正定矩阵的概念，并掌握其判别法.</p><h1 id="概率论与数理统计"><a href="#概率论与数理统计" class="headerlink" title="概率论与数理统计"></a><strong>概率论与数理统计</strong></h1><h2 id="一、随机事件和概率"><a href="#一、随机事件和概率" class="headerlink" title="一、随机事件和概率"></a>一、随机事件和概率</h2><p>随机事件与样本空</p><p>事件的关系与运算</p><p>完备事件组</p><p>概率的概念</p><p>概率的基本性质</p><p>古典型概率</p><p>几何型概率</p><p>条件概率</p><p>概率的基本公式</p><p>事件的独立性</p><p>独立重复试验.</p><p>考试要求</p><p>1.了解样本空间(基本事件空间)的概念，理解随机事件的概念，掌握事件的关系及运算.</p><p>2.理解概率、条件概率的概念，掌握概率的基本性质，会计算古典型概率和几何型概率，掌握概率的加法公式、减法公式、乘法公式、全概率公式，以及贝叶斯(Bayes)公式.</p><p>3.理解事件独立性的概念，掌握用事件独立性进行概率计算;理解独立重复试验的概念，掌握计算有关事件概率的方法.</p><h2 id="二、随机变量及其分布"><a href="#二、随机变量及其分布" class="headerlink" title="二、随机变量及其分布"></a>二、随机变量及其分布</h2><p>随机变量</p><p>随机变量分布函数的概念及其性质</p><p>离散型随机变量的概率分布</p><p>连续型随机变量的概率密度</p><p>常见随机变量的分布</p><p>随机变量函数的分布.</p><p>考试要求</p><p>1.理解随机变量的概念，理解分布函数的概念及性质，会计算与随机变量相联系的事件的概率.</p><p>2.理解离散型随机变量及其概率分布的概念，掌握0-1分布、二项分布、几何分布、超几何分布、泊松(Poisson)分布及其应用.</p><p>3.了解泊松定理的结论和应用条件，会用泊松分布近似表示二项分布.</p><p>4.理解连续型随机变量及其概率密度的概念，掌握均匀分布、正态分布、指数分布及其应用，参数为λ（λ&gt;0）的指数分布的概率密度.</p><p>5.会求随机变量函数的分布.</p><h2 id="三、多维随机变量及其分布"><a href="#三、多维随机变量及其分布" class="headerlink" title="三、多维随机变量及其分布"></a>三、多维随机变量及其分布</h2><p>多维随机变量及其分布二维离散型随机变量的概率分布、边缘分布和条件分布</p><p>二维连续型随机变量的概率密度、边缘概率密度和条件密度</p><p>随机变量的独立性和不相关性</p><p>常用二维随机变量的分布</p><p>两个及两个以上随机变量简单函数的分布.</p><p>考试要求</p><p>1.理解多维随机变量的概念，理解多维随机变量的分布的概念和性质，理解二维离散型随机变量的概率分布、边缘分布和条件分布，理解二维连续型随机变量的概率密度、边缘密度和条件密度，会求与二维随机变量相关事件的概率.</p><p>2.理解随机变量的独立性及不相关性的概念，掌握随机变量相互独立的条件.</p><p>3.掌握二维均匀分布，了解二维正态分布的概率密度，理解其中参数的概率意义.</p><p>4.会求两个随机变量简单函数的分布，会求多个相互独立随机变量简单函数的分布.</p><h2 id="四、随机变量的数字特征"><a href="#四、随机变量的数字特征" class="headerlink" title="四、随机变量的数字特征"></a>四、随机变量的数字特征</h2><p>随机变量的数学期望(均值)</p><p>方差、标准差及其性质</p><p>随机变量函数的数学期</p><p>矩、协方差、相关系数及其性质.</p><p>考试要求</p><p>1.理解随机变量数字特征(数学期望、方差、标准差、矩、协方差、相关系数)的概念，会运用数字特征的基本性质，并掌握常用分布的数字特征.</p><p>2.会求随机变量函数的数学期望.</p><h2 id="五、大数定律和中心极限定理"><a href="#五、大数定律和中心极限定理" class="headerlink" title="五、大数定律和中心极限定理"></a>五、大数定律和中心极限定理</h2><p>切比雪夫(Chebyshev)不等式</p><p>切比雪夫大数定律</p><p>伯努利(Bernoulli)大数定律</p><p>辛钦(Khinchine)大数定律</p><p>棣莫弗-拉普拉斯(De Moivre-Laplace)定理</p><p>列维-林德伯格(Levy-Lindberg)定理.</p><p>考试要求</p><p>1.了解切比雪夫不等式.</p><p>2.了解切比雪夫大数定律、伯努利大数定律和辛钦大数定律(独立同分布随机变量序列的大数定律).</p><p>3.了解棣莫弗-拉普拉斯定理(二项分布以正态分布为极限分布)和列维-林德伯格定理(独立同分布随机变量序列的中心极限定理).</p><p>六、数理统计的基本概念</p><p>总体、个体、简单随机样本、统计量、样本均值、样本方差和样本矩、卡方分布、t分布、F分布、分位数、正态总体的常用抽样分布.</p><p>考试要求</p><p>1.理解总体、简单随机样本、统计量、样本均值、样本方差及样本矩的概念.</p><p>2.了解卡方分布、t分布和F分布的概念及性质，了解上侧α分位数的概念并会查表计算.</p><p>3.了解正态总体的常用抽样分布.</p><h2 id="七、参数估计"><a href="#七、参数估计" class="headerlink" title="七、参数估计"></a>七、参数估计</h2><p>点估计的概念</p><p>估计量与估计值</p><p>矩估计法</p><p>最大似然估计法</p><p>估计量的评选标准</p><p>区间估计的概念</p><p>单个正态总体的均值和方差的区间估计</p><p>两个正态总体的均值差和方差比的区间估计.</p><p>考试要求</p><p>1.理解参数的点估计、估计量与估计值的概念.</p><p>2.掌握矩估计法(一阶矩、二阶矩)和最大似然估计法.</p><p>3.了解估计量的无偏性、有效性(最小方差性)和一致性(相合性)的概念，并会验证估计量的无偏性.</p><p>4、理解区间估计的概念，会求单个正态总体的均值和方差的置信区间，会求两个正态总体的均值差和方差比的置信区间.</p><h2 id="八、假设检验"><a href="#八、假设检验" class="headerlink" title="八、假设检验"></a>八、假设检验</h2><p>显著性检</p><p>假设检验的两类错误</p><p>单个及两个正态总体的均值和方差的假设检验.</p><p>考试要求</p><p>1.理解显著性检验的基本思想，掌握假设检验的基本步骤，了解假设检验可能产生的两类错误.</p><p>2.掌握单个及两个正态总体的均值和方差的假设检验.</p>]]></content>
      
      
      <categories>
          
          <category> 资料 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 资料 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>将基于TCP协议的Client-Server通信程序示例的服务器端程序改造成线程池版。</title>
      <link href="/2022/03/27/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
      <url>/2022/03/27/%E5%88%86%E5%B8%83%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="将基于TCP协议的Client-Server通信程序示例的服务器端程序改造成线程池版。"><a href="#将基于TCP协议的Client-Server通信程序示例的服务器端程序改造成线程池版。" class="headerlink" title="将基于TCP协议的Client-Server通信程序示例的服务器端程序改造成线程池版。"></a>将基于TCP协议的Client-Server通信程序示例的服务器端程序改造成线程池版。</h1><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>安装jdk，安装maven，为maven设置阿里或腾讯镜像仓库，用maven编译Helloworld版的java程序</p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>将基于TCP协议的Client-Server通信程序示例的服务器端程序改造成线程池版。</p><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line"> * @summary: 客户端</span><br><span class="line"> * @Author: Jianxiang Guo</span><br><span class="line"> * @Date: 2022-03-27 13:51:43</span><br><span class="line"> * @LastEditTime: 2022-03-27 14:48:22</span><br><span class="line"> * @FilePath: \maven01\src\main\java\com\xxx\maven01\EchoClient.java</span><br><span class="line"> */</span><br><span class="line">package com.xxx.maven01;</span><br><span class="line"></span><br><span class="line">import java.io.*;</span><br><span class="line">import java.net.*;</span><br><span class="line"></span><br><span class="line">public class EchoClient &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line">    </span><br><span class="line">        String userInput = null;</span><br><span class="line">        String echoMessage = null;</span><br><span class="line"></span><br><span class="line">        BufferedReader stdIn = new BufferedReader(new InputStreamReader(System.in));</span><br><span class="line"></span><br><span class="line">        //目标ip</span><br><span class="line">        Socket socket = new Socket(&quot;192.168.1.105&quot;,8189);</span><br><span class="line">        System.out.println(&quot;Connect to Server&quot;);</span><br><span class="line"></span><br><span class="line">        InputStream inputStream = socket.getInputStream();</span><br><span class="line">        OutputStream outputStream = socket.getOutputStream();</span><br><span class="line">        BufferedReader in = new BufferedReader(new InputStreamReader(inputStream));</span><br><span class="line">        PrintWriter out = new PrintWriter(outputStream);</span><br><span class="line"></span><br><span class="line">        while((userInput = stdIn.readLine() )!=null)&#123;</span><br><span class="line">            out.println(userInput);</span><br><span class="line">            out.flush();</span><br><span class="line">            echoMessage = in.readLine();</span><br><span class="line">            System.out.println(&quot;Echo from server: &quot;+ echoMessage);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        socket.close();</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="服务器端"><a href="#服务器端" class="headerlink" title="服务器端"></a>服务器端</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line"> * @summary: 服务器端</span><br><span class="line"> * @Author: Jianxiang Guo</span><br><span class="line"> * @Date: 2022-03-27 13:53:03</span><br><span class="line"> * @LastEditTime: 2022-03-27 15:37:00</span><br><span class="line"> * @FilePath: \maven01\src\main\java\com\xxx\maven01\EchoServer.java</span><br><span class="line"> */</span><br><span class="line">package com.xxx.maven01;</span><br><span class="line"></span><br><span class="line">import java.io.*;</span><br><span class="line">import java.net.ServerSocket;</span><br><span class="line">import java.net.Socket;</span><br><span class="line">import java.util.concurrent.ArrayBlockingQueue;</span><br><span class="line">import java.util.concurrent.ThreadPoolExecutor;</span><br><span class="line">import java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line">public class ServerPool &#123;</span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line">    //监听socket</span><br><span class="line">        ServerSocket listenSocket = new ServerSocket(8189);</span><br><span class="line">        Socket socket = null;</span><br><span class="line"></span><br><span class="line">        int count = 0;</span><br><span class="line">        System.out.println(&quot;Server listening at 8189&quot;);</span><br><span class="line"></span><br><span class="line">        ThreadPoolExecutor executor = new ThreadPoolExecutor(5, 10, 200,TimeUnit.MILLISECONDS, new ArrayBlockingQueue&lt;Runnable&gt;(5));</span><br><span class="line"></span><br><span class="line">        for (int i = 0; i &lt; 15; i++) &#123;</span><br><span class="line">            socket = listenSocket.accept();</span><br><span class="line">            count++;</span><br><span class="line">            ServerThread thread = new ServerThread(socket);</span><br><span class="line">            executor.execute(thread);</span><br><span class="line">            System.out.println(&quot;The total number of clients is &quot; + count + &quot;.&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        listenSocket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class ServerThread implements Runnable &#123;</span><br><span class="line"></span><br><span class="line">    Socket socket = null;</span><br><span class="line"></span><br><span class="line">    public ServerThread(Socket socket) &#123;</span><br><span class="line">        this.socket = socket;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void run()&#123;</span><br><span class="line">        InputStream is=null;</span><br><span class="line">        InputStreamReader isr=null;</span><br><span class="line">        BufferedReader br=null;</span><br><span class="line">        OutputStream os=null;</span><br><span class="line">        PrintWriter pw=null;</span><br><span class="line">        try &#123;</span><br><span class="line">            is = socket.getInputStream();</span><br><span class="line">            isr = new InputStreamReader(is);</span><br><span class="line">            br = new BufferedReader(isr);</span><br><span class="line">            os = socket.getOutputStream();</span><br><span class="line">            pw = new PrintWriter(os);</span><br><span class="line">            String info=null;</span><br><span class="line">            while((info=br.readLine())!=null)&#123;</span><br><span class="line">                System.out.println(&quot;Message from client:&quot;+info);</span><br><span class="line">                pw.println(info);</span><br><span class="line">                pw.flush();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;finally&#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                if(pw!=null)</span><br><span class="line">                    pw.close();</span><br><span class="line">                if(os!=null)</span><br><span class="line">                    os.close();</span><br><span class="line">                if(br!=null)</span><br><span class="line">                    br.close();</span><br><span class="line">                if(isr!=null)</span><br><span class="line">                    isr.close();</span><br><span class="line">                if(is!=null)</span><br><span class="line">                    is.close();</span><br><span class="line">                if(socket!=null)</span><br><span class="line">                    socket.close();</span><br><span class="line">            &#125; catch (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果<br><img src="/img/1.png" alt="实验结果"></p>]]></content>
      
      
      <categories>
          
          <category> 实验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Wx-app学习笔记</title>
      <link href="/2022/02/22/wx/"/>
      <url>/2022/02/22/wx/</url>
      
        <content type="html"><![CDATA[<h1 id="微信小程序知识点记录"><a href="#微信小程序知识点记录" class="headerlink" title="微信小程序知识点记录"></a>微信小程序知识点记录</h1><h2 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h2><h3 id="window"><a href="#window" class="headerlink" title="window"></a>window</h3><p>用于设置小程序的状态栏、导航条、标题、窗口背景色。  </p><ul><li><strong>navigationBarBackgroundColor</strong>  导航栏背景颜色，如 #000000</li><li><strong>navigationBarTextStyle</strong>    导航栏标题颜色，仅支持 black / white</li><li><strong>navigationBarTitleText</strong> 导航栏标题文字内容</li><li><strong>backgroundColor</strong> 窗口的背景色</li><li><strong>backgroundTextStyle</strong> 下拉 loading 的样式，仅支持 dark / light</li><li><strong>enablePullDownRefresh</strong> 是否开启全局的下拉刷新<h3 id="tabBar"><a href="#tabBar" class="headerlink" title="tabBar"></a>tabBar</h3><img src="https://res.wx.qq.com/wxdoc/dist/assets/img/tabbar.ce1b3c5b.png" alt="tabBar"><h2 id="框架接口"><a href="#框架接口" class="headerlink" title="框架接口"></a>框架接口</h2><h3 id="页面page"><a href="#页面page" class="headerlink" title="页面page"></a>页面page</h3><h4 id="data"><a href="#data" class="headerlink" title="data"></a>data</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;view&gt;&#123;&#123;text&#125;&#125;&lt;/view&gt;</span><br><span class="line">&lt;view&gt;&#123;&#123;array[0].msg&#125;&#125;&lt;/view&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    text: &#x27;init data&#x27;,</span><br><span class="line">    array: [&#123;msg: &#x27;1&#x27;&#125;, &#123;msg: &#x27;2&#x27;&#125;]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="生命周期回调函数"><a href="#生命周期回调函数" class="headerlink" title="生命周期回调函数"></a>生命周期回调函数</h3></li></ul><p><strong>onLoad(Object query)</strong><br>页面加载时触发。一个页面只会调用一次，可以在 onLoad 的参数中获取打开当前页面路径中的参数。<br><strong>onShow()</strong><br>页面显示/切入前台时触发。<br><strong>onReady()</strong><br>页面初次渲染完成时触发。一个页面只会调用一次，代表页面已经准备妥当，可以和视图层进行交互。<br><strong>onHide()</strong><br>页面隐藏/切入后台时触发。 如 wx.navigateTo 或底部 tab 切换到其他页面，小程序切入后台等</p><h2 id="WXML语法参考"><a href="#WXML语法参考" class="headerlink" title="WXML语法参考"></a>WXML语法参考</h2><h3 id="wx-for"><a href="#wx-for" class="headerlink" title="wx:for"></a>wx:for</h3><p>wx:for搭配使用wx:key=”*this”<br>wx:for=”“ wx:key=”*this”</p><h3 id="wx-if"><a href="#wx-if" class="headerlink" title="wx:if"></a>wx:if</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;view wx:if=&quot;&#123;&#123;length &gt; 5&#125;&#125;&quot;&gt; 1 &lt;/view&gt;</span><br><span class="line">&lt;view wx:elif=&quot;&#123;&#123;length &gt; 2&#125;&#125;&quot;&gt; 2 &lt;/view&gt;</span><br><span class="line">&lt;view wx:else&gt; 3 &lt;/view&gt;</span><br></pre></td></tr></table></figure><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><h3 id="scroll-view-可滚动视图区域"><a href="#scroll-view-可滚动视图区域" class="headerlink" title="scroll-view   可滚动视图区域"></a>scroll-view   可滚动视图区域</h3><p>scroll-x/y 允许横向/纵向滚动  </p><h3 id="swiper-轮播图"><a href="#swiper-轮播图" class="headerlink" title="swiper  轮播图"></a>swiper  轮播图</h3><ul><li>autoplay  是否自动切换</li><li>interval  自动切换时间间隔</li><li>duration  滑动动画时长</li><li>indicator-dots  是否显示面板指示点<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">    background: [&#x27;demo-text-1&#x27;, &#x27;demo-text-2&#x27;, &#x27;demo-text-3&#x27;],</span><br><span class="line">    indicatorDots: true,</span><br><span class="line">    vertical: false,</span><br><span class="line">    autoplay: false,</span><br><span class="line">    interval: 2000,</span><br><span class="line">    duration: 500</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;swiper indicator-dots=&quot;&#123;&#123;indicatorDots&#125;&#125;&quot;</span><br><span class="line">        autoplay=&quot;&#123;&#123;autoplay&#125;&#125;&quot; interval=&quot;&#123;&#123;interval&#125;&#125;&quot; duration=&quot;&#123;&#123;duration&#125;&#125;&quot;&gt;</span><br><span class="line">        &lt;block wx:for=&quot;&#123;&#123;background&#125;&#125;&quot; wx:key=&quot;*this&quot;&gt;</span><br><span class="line">          &lt;swiper-item&gt;</span><br><span class="line">            &lt;view class=&quot;swiper-item &#123;&#123;item&#125;&#125;&quot;&gt;&lt;/view&gt;</span><br><span class="line">          &lt;/swiper-item&gt;</span><br><span class="line">        &lt;/block&gt;</span><br><span class="line">      &lt;/swiper&gt;</span><br></pre></td></tr></table></figure><h3 id="icon-图标组件"><a href="#icon-图标组件" class="headerlink" title="icon 图标组件"></a>icon 图标组件</h3><a href="https://www.iconfont.cn/manage/index?manage_type=myprojects&projectId=3182664">阿里图标库</a><h3 id="progress-进度条"><a href="#progress-进度条" class="headerlink" title="progress 进度条"></a>progress 进度条</h3></li><li>percent 百分比0~100</li><li>show-info 在进度条右侧显示百分比<h3 id="checkbox-多选项目"><a href="#checkbox-多选项目" class="headerlink" title="checkbox  多选项目"></a>checkbox  多选项目</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;checkbox-group bindchange=&quot;checkboxChange&quot;&gt;</span><br><span class="line">          &lt;label class=&quot;weui-cell weui-check__label&quot; wx:for=&quot;&#123;&#123;items&#125;&#125;&quot; wx:key=&quot;&#123;&#123;item.value&#125;&#125;&quot;&gt;</span><br><span class="line">            &lt;view class=&quot;weui-cell__hd&quot;&gt;</span><br><span class="line">              &lt;checkbox value=&quot;&#123;&#123;item.value&#125;&#125;&quot; checked=&quot;&#123;&#123;item.checked&#125;&#125;&quot;/&gt;</span><br><span class="line">            &lt;/view&gt;</span><br><span class="line">            &lt;view class=&quot;weui-cell__bd&quot;&gt;&#123;&#123;item.name&#125;&#125;&lt;/view&gt;</span><br><span class="line">          &lt;/label&gt;</span><br><span class="line">        &lt;/checkbox-group&gt;</span><br></pre></td></tr></table></figure><h3 id="input-输入框"><a href="#input-输入框" class="headerlink" title="input 输入框"></a>input 输入框</h3></li><li>type 输入数据类型</li><li>value 输入框的初始内容</li><li>password 是否是密码类型</li><li>confirm-type 设置键盘右下角按钮的文字，仅在type=’text’时生效<h3 id="radio-单选项目"><a href="#radio-单选项目" class="headerlink" title="radio 单选项目"></a>radio 单选项目</h3><h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><h3 id="跳转"><a href="#跳转" class="headerlink" title="跳转"></a>跳转</h3></li><li>switchTab  跳转到 tabBar 页面，并关闭其他所有非 tabBar 页面</li><li>reLaunch 关闭所有页面，打开到应用内的某个页面</li><li>redirectTo 关闭当前页面，跳转到应用内的某个页面。但是不允许跳转到 tabbar 页面。</li><li>navigateTo 保留当前页面，跳转到应用内的某个页面。但是不能跳到 tabbar 页面。使用 wx.navigateBack 可以返回到原页面。小程序中页面栈最多十层。<h3 id="分享"><a href="#分享" class="headerlink" title="分享"></a>分享</h3>open-type=”share”<h3 id="showToast-显示消息提示框"><a href="#showToast-显示消息提示框" class="headerlink" title="showToast 显示消息提示框"></a>showToast 显示消息提示框</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wx.showToast(&#123;</span><br><span class="line">  title: &#x27;成功&#x27;,</span><br><span class="line">  icon: &#x27;success&#x27;,</span><br><span class="line">  duration: 2000</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="request-发起-HTTPS-网络请求"><a href="#request-发起-HTTPS-网络请求" class="headerlink" title="request 发起 HTTPS 网络请求"></a><strong>request</strong> 发起 HTTPS 网络请求</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wx.request(&#123;</span><br><span class="line">  url: &#x27;example.php&#x27;, //仅为示例，并非真实的接口地址</span><br><span class="line">  data: &#123;</span><br><span class="line">    x: &#x27;&#x27;,</span><br><span class="line">    y: &#x27;&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  header: &#123;</span><br><span class="line">    &#x27;content-type&#x27;: &#x27;application/json&#x27; // 默认值</span><br><span class="line">  &#125;,</span><br><span class="line">  success (res) &#123;</span><br><span class="line">    console.log(res.data)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="数据缓存"><a href="#数据缓存" class="headerlink" title="数据缓存"></a>数据缓存</h3></li><li>setStorageSync 将数据存储在本地缓存中指定的 key 中。会覆盖掉原来该 key 对应的内容。</li><li>getStorageSync 从本地缓存中同步获取指定 key 的内容<h3 id="获取用户信息。-getUserProfile"><a href="#获取用户信息。-getUserProfile" class="headerlink" title="获取用户信息。 getUserProfile"></a>获取用户信息。 getUserProfile</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    userInfo: &#123;&#125;,</span><br><span class="line">    hasUserInfo: false,</span><br><span class="line">    canIUseGetUserProfile: false,</span><br><span class="line">  &#125;,</span><br><span class="line">  onLoad() &#123;</span><br><span class="line">    if (wx.getUserProfile) &#123;</span><br><span class="line">      this.setData(&#123;</span><br><span class="line">        canIUseGetUserProfile: true</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  getUserProfile(e) &#123;</span><br><span class="line">    // 推荐使用wx.getUserProfile获取用户信息，开发者每次通过该接口获取用户个人信息均需用户确认</span><br><span class="line">    // 开发者妥善保管用户快速填写的头像昵称，避免重复弹窗</span><br><span class="line">    wx.getUserProfile(&#123;</span><br><span class="line">      desc: &#x27;用于完善会员资料&#x27;, // 声明获取用户个人信息后的用途，后续会展示在弹窗中，请谨慎填写</span><br><span class="line">      success: (res) =&gt; &#123;</span><br><span class="line">        this.setData(&#123;</span><br><span class="line">          userInfo: res.userInfo,</span><br><span class="line">          hasUserInfo: true</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  getUserInfo(e) &#123;</span><br><span class="line">    // 不推荐使用getUserInfo获取用户信息，预计自2021年4月13日起，getUserInfo将不再弹出弹窗，并直接返回匿名的用户个人信息</span><br><span class="line">    this.setData(&#123;</span><br><span class="line">      userInfo: e.detail.userInfo,</span><br><span class="line">      hasUserInfo: true</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="云开发"><a href="#云开发" class="headerlink" title="云开发"></a>云开发</h2></li></ul>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MarkDown学习笔记</title>
      <link href="/2022/02/21/MarkDown/"/>
      <url>/2022/02/21/MarkDown/</url>
      
        <content type="html"><![CDATA[<p>#数量表示标题等级</p><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h1 id="段落下三个“-”"><a href="#段落下三个“-”" class="headerlink" title="段落下三个“=”"></a>段落下三个“=”</h1><h2 id="段落下三个“-”-1"><a href="#段落下三个“-”-1" class="headerlink" title="段落下三个“-”"></a>段落下三个“-”</h2><hr><h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2><p>三个***表示分割线</p><hr><h2 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h2><p>强制换行：两个空格<br>加回车</p><hr><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><blockquote><p>“&gt;”区块引用</p><blockquote><p>“&gt;&gt;”嵌套引用</p></blockquote></blockquote><hr><h2 id="代码段"><a href="#代码段" class="headerlink" title="代码段"></a>代码段</h2><pre><code>    void main()        &#123;            printf(&quot;Hello, world.&quot;);        &#125;     代码段缩进四个空格/一个tab</code></pre><p>或围栏代码块三个“~”</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void main()</span><br><span class="line">&#123;</span><br><span class="line">    printf(&quot;Hello, world.&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h2><p><em>斜体由“**”包裹</em><br><strong>粗体由两个“*”包裹</strong></p><hr><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>无序列表 -加空格</p><ul><li>第一项</li><li>第二项</li><li>第三项<br>有序列表1.2.即可</li></ul><ol><li>第一项</li><li>第二项</li><li>第三项</li></ol><hr><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p>[name]（url）<br><a href="https://31vgs.github.io/">我的博客</a></p><hr><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><p>[name]（url）<br><img src="/img/friend_404.gif" alt="示例"></p><hr><p><code>反引号标记</code></p><hr><h2 id="公式"><a href="#公式" class="headerlink" title="公式"></a>公式</h2><p>支持latex </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$$</span><br><span class="line">\lim_&#123;x \to 0&#125;\frac&#123;sin(t)&#125;&#123;x&#125;=1</span><br><span class="line">$$</span><br></pre></td></tr></table></figure><p>$$<br>\lim_{x \to 0}\frac{sin(t)}{x}=1<br>$$</p><hr><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Markdown | Less | Pretty</span><br><span class="line">--- | :---: | ---:</span><br><span class="line">*默认左对齐* | `此列剧中` | **此列右对齐**</span><br><span class="line">1 | 2 | 3</span><br><span class="line">11 | 22 | 33</span><br></pre></td></tr></table></figure><table><thead><tr><th>Markdown</th><th align="center">Less</th><th align="right">Pretty</th></tr></thead><tbody><tr><td><em>默认左对齐</em></td><td align="center"><code>此列剧中</code></td><td align="right"><strong>此列右对齐</strong></td></tr><tr><td>1</td><td align="center">2</td><td align="right">3</td></tr><tr><td>11</td><td align="center">22</td><td align="right">33</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/02/18/hello-world/"/>
      <url>/2022/02/18/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
